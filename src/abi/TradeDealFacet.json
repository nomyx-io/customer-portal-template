{
    "address": "0x24664f9240dcAADd20BfC75a8Ae8c0314eEaa2a7",
    "abi": [
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "totalInterest",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "invoicePoolInterest",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "vabiInterest",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "vabiTokensMinted",
            "type": "uint256"
          }
        ],
        "name": "InterestDistributedForTradeDeal",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "InvoiceDepositedToTradeDeal",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "InvoiceWithdrawnFromTradeDeal",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          }
        ],
        "name": "TradeDealActivated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "symbol",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "interestRate",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "vabbToVabiRatio",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "active",
            "type": "bool"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "nftAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "vabbAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "vabiAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "usdcAddress",
            "type": "address"
          }
        ],
        "name": "TradeDealCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          }
        ],
        "name": "TradeDealDeactivated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "participant",
            "type": "address"
          }
        ],
        "name": "TradeDealParticipantAdded",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "participant",
            "type": "address"
          }
        ],
        "name": "TradeDealParticipantRemoved",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "claimTopics",
            "type": "uint256[]"
          }
        ],
        "name": "TradeDealRequiredClaimTopicsSet",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "symbol",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "interestRate",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "vabbToVabiRatio",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "active",
            "type": "bool"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "vabbAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "vabiAddress",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "usdcAddress",
            "type": "address"
          }
        ],
        "name": "TradeDealUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "USDCDepositedToTradeDeal",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "USDCWithdrawnFromTradeDeal",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          }
        ],
        "name": "activateTradeDeal",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "interestRate",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "vabbToVabiRatio",
            "type": "uint256"
          },
          {
            "internalType": "uint256[]",
            "name": "requiredClaimTopics",
            "type": "uint256[]"
          },
          {
            "internalType": "address",
            "name": "vabbAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "vabiAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "usdcAddress",
            "type": "address"
          }
        ],
        "name": "createTradeDeal",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          }
        ],
        "name": "deactivateTradeDeal",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "diamondOwner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getAllTradeDealIds",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          }
        ],
        "name": "getTradeDealInfo",
        "outputs": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "interestRate",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "vabbToVabiRatio",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "active",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          }
        ],
        "name": "getTradeDealRequiredClaimTopics",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          }
        ],
        "name": "getTradeDealTokenAddresses",
        "outputs": [
          {
            "internalType": "address",
            "name": "nftAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "vabbAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "vabiAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "usdcAddress",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          }
        ],
        "name": "isTradeDealParticipant",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "setTradeDealNFTAddress",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "internalType": "uint256[]",
            "name": "claimTopics",
            "type": "uint256[]"
          }
        ],
        "name": "setTradeDealRequiredClaimTopics",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "vabbAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "vabiAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "usdcAddress",
            "type": "address"
          }
        ],
        "name": "setTradeDealTokenAddresses",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "tdDepositInvoice",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "tdDepositUSDC",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          }
        ],
        "name": "tdDistributeInterest",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "tdWithdrawInvoice",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "tdWithdrawUSDC",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tradeDealId",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "interestRate",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "vabbToVabiRatio",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "vabbAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "vabiAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "usdcAddress",
            "type": "address"
          }
        ],
        "name": "updateTradeDeal",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0xe31413e960cb885f90b1a71f185e61b770c7b0ee86a53ae694ba146f7ea15c17",
    "receipt": {
      "to": null,
      "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
      "contractAddress": "0x24664f9240dcAADd20BfC75a8Ae8c0314eEaa2a7",
      "transactionIndex": 36,
      "gasUsed": "2673843",
      "logsBloom": "0x
      "blockHash": "0x6397c9f2598ee1af4c5e6e992d3eb3ae895a195c1949e5c3583a51656a589467",
      "transactionHash": "0xe31413e960cb885f90b1a71f185e61b770c7b0ee86a53ae694ba146f7ea15c17",
      "logs": [],
      "blockNumber": 23363594,
      "cumulativeGasUsed": "10084317",
      "status": 1,
      "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "d6580ec9a51066fb54c05832acdc607a",
    "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invoicePoolInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vabiInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vabiTokensMinted\",\"type\":\"uint256\"}],\"name\":\"InterestDistributedForTradeDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvoiceDepositedToTradeDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvoiceWithdrawnFromTradeDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"}],\"name\":\"TradeDealActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vabbToVabiRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vabbAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vabiAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcAddress\",\"type\":\"address\"}],\"name\":\"TradeDealCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"}],\"name\":\"TradeDealDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"TradeDealParticipantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"TradeDealParticipantRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"TradeDealRequiredClaimTopicsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vabbToVabiRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vabbAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vabiAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdcAddress\",\"type\":\"address\"}],\"name\":\"TradeDealUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"USDCDepositedToTradeDeal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"USDCWithdrawnFromTradeDeal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"}],\"name\":\"activateTradeDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vabbToVabiRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"requiredClaimTopics\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"vabbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vabiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcAddress\",\"type\":\"address\"}],\"name\":\"createTradeDeal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"}],\"name\":\"deactivateTradeDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTradeDealIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"}],\"name\":\"getTradeDealInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vabbToVabiRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"}],\"name\":\"getTradeDealRequiredClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"}],\"name\":\"getTradeDealTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vabbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vabiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isTradeDealParticipant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setTradeDealNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"setTradeDealRequiredClaimTopics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vabbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vabiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcAddress\",\"type\":\"address\"}],\"name\":\"setTradeDealTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tdDepositInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tdDepositUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"}],\"name\":\"tdDistributeInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tdWithdrawInvoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tdWithdrawUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeDealId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vabbToVabiRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vabbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vabiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcAddress\",\"type\":\"address\"}],\"name\":\"updateTradeDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/TradeDealFacet.sol\":\"TradeDealFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4444},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\",\"keccak256\":\"0x7bd5dc796c245d4c52836610455d172cdfcc1f8dcf0d9b1c4cbde212fde02965\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/facets/TradeDealFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utilities/Modifiers.sol\\\";\\nimport \\\"../libraries/TradeDealLib.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract TradeDealFacet is Modifiers {\\n    // Events - duplicated from TradeDealLib to ensure proper EVM event emission\\n    event TradeDealCreated(\\n        uint256 indexed tradeDealId,\\n        string name,\\n        string symbol,\\n        uint256 interestRate,\\n        uint256 vabbToVabiRatio,\\n        bool active,\\n        address nftAddress,\\n        address vabbAddress,\\n        address vabiAddress,\\n        address usdcAddress\\n    );\\n    event TradeDealUpdated(\\n        uint256 indexed tradeDealId,\\n        string name,\\n        string symbol,\\n        uint256 interestRate,\\n        uint256 vabbToVabiRatio,\\n        bool active,\\n        address vabbAddress,\\n        address vabiAddress,\\n        address usdcAddress\\n    );\\n    event TradeDealActivated(uint256 indexed tradeDealId);\\n    event TradeDealDeactivated(uint256 indexed tradeDealId);\\n    event TradeDealParticipantAdded(uint256 indexed tradeDealId, address indexed participant);\\n    event TradeDealParticipantRemoved(uint256 indexed tradeDealId, address indexed participant);\\n    event InvoiceDepositedToTradeDeal(uint256 indexed tradeDealId, uint256 indexed tokenId);\\n    event InvoiceWithdrawnFromTradeDeal(uint256 indexed tradeDealId, uint256 indexed tokenId);\\n    event USDCDepositedToTradeDeal(uint256 indexed tradeDealId, uint256 amount);\\n    event USDCWithdrawnFromTradeDeal(uint256 indexed tradeDealId, uint256 amount);\\n    event InterestDistributedForTradeDeal(uint256 indexed tradeDealId, uint256 totalInterest, uint256 invoicePoolInterest, uint256 vabiInterest, uint256 vabiTokensMinted);\\n    event TradeDealRequiredClaimTopicsSet(uint256 indexed tradeDealId, uint256[] claimTopics);\\n    \\n    // Single version of createTradeDeal that takes all parameters\\n    // If vabbAddress is the zero address, the VABBTokenFactoryFacet will be used to create a new VABB token\\n    // If requiredClaimTopics is empty, no claim topics will be required for participation\\n    function createTradeDeal(\\n        string memory name,\\n        string memory symbol,\\n        uint256 interestRate,\\n        uint256 vabbToVabiRatio,\\n        uint256[] memory requiredClaimTopics,\\n        address vabbAddress,\\n        address vabiAddress,\\n        address usdcAddress\\n    ) external onlyOwner returns (uint256) {\\n        (TradeDealLib.TradeDealCreatedParams memory params, bool hasClaimTopics, uint256[] memory claimTopics) = TradeDealLib._createTradeDeal(\\n            name,\\n            symbol,\\n            interestRate,\\n            vabbToVabiRatio,\\n            requiredClaimTopics,\\n            vabbAddress,\\n            vabiAddress,\\n            usdcAddress\\n        );\\n        \\n        // Emit the TradeDealCreated event\\n        emit TradeDealCreated(\\n            params.tradeDealId,\\n            params.name,\\n            params.symbol,\\n            params.interestRate,\\n            params.vabbToVabiRatio,\\n            params.active,\\n            params.nftAddress,\\n            params.vabbAddress,\\n            params.vabiAddress,\\n            params.usdcAddress\\n        );\\n        \\n        // If claim topics were set, emit that event too\\n        if (hasClaimTopics) {\\n            emit TradeDealRequiredClaimTopicsSet(params.tradeDealId, claimTopics);\\n        }\\n        \\n        return params.tradeDealId;\\n    }\\n    \\n    function updateTradeDeal(\\n        uint256 tradeDealId,\\n        string memory name,\\n        string memory symbol,\\n        uint256 interestRate,\\n        uint256 vabbToVabiRatio,\\n        address vabbAddress,\\n        address vabiAddress,\\n        address usdcAddress\\n    ) external onlyOwner {\\n        TradeDealLib.TradeDealUpdatedParams memory params = TradeDealLib._updateTradeDeal(\\n            tradeDealId,\\n            name,\\n            symbol,\\n            interestRate,\\n            vabbToVabiRatio,\\n            vabbAddress,\\n            vabiAddress,\\n            usdcAddress\\n        );\\n        \\n        // Emit the TradeDealUpdated event\\n        emit TradeDealUpdated(\\n            params.tradeDealId,\\n            params.name,\\n            params.symbol,\\n            params.interestRate,\\n            params.vabbToVabiRatio,\\n            params.active,\\n            params.vabbAddress,\\n            params.vabiAddress,\\n            params.usdcAddress\\n        );\\n    }\\n    \\n    function activateTradeDeal(uint256 tradeDealId) external onlyOwner {\\n        uint256 returnedId = TradeDealLib._activateTradeDeal(tradeDealId);\\n        emit TradeDealActivated(returnedId);\\n    }\\n    \\n    function deactivateTradeDeal(uint256 tradeDealId) external onlyOwner {\\n        uint256 returnedId = TradeDealLib._deactivateTradeDeal(tradeDealId);\\n        emit TradeDealDeactivated(returnedId);\\n    }\\n    \\n    function getTradeDealInfo(uint256 tradeDealId) external view returns (\\n        string memory name,\\n        string memory symbol,\\n        uint256 interestRate,\\n        uint256 vabbToVabiRatio,\\n        bool active\\n    ) {\\n        TradeDealLib.TradeDeal memory tradeDeal = TradeDealLib._getTradeDealInfo(tradeDealId);\\n        return (\\n            tradeDeal.name,\\n            tradeDeal.symbol,\\n            tradeDeal.interestRate,\\n            tradeDeal.vabbToVabiRatio,\\n            tradeDeal.active\\n        );\\n    }\\n    \\n    function getAllTradeDealIds() external view returns (uint256[] memory) {\\n        return TradeDealLib._getAllTradeDealIds();\\n    }\\n    \\n    function isTradeDealParticipant(uint256 tradeDealId, address user) external view returns (bool) {\\n        return TradeDealLib._isTradeDealParticipant(tradeDealId, user);\\n    }\\n    \\n    function tdDepositInvoice(uint256 tradeDealId, uint256 tokenId) external {\\n        require(TradeDealLib._isTradeDealParticipant(tradeDealId, msg.sender) || msg.sender == LibDiamond.contractOwner(), \\\"Not a participant in this trade deal\\\");\\n        (uint256 returnedDealId, uint256 returnedTokenId) = TradeDealLib._depositInvoiceToTradeDeal(tradeDealId, tokenId);\\n        emit InvoiceDepositedToTradeDeal(returnedDealId, returnedTokenId);\\n    }\\n    \\n    function tdWithdrawInvoice(uint256 tradeDealId, uint256 tokenId) external {\\n        require(TradeDealLib._isTradeDealParticipant(tradeDealId, msg.sender) || msg.sender == LibDiamond.contractOwner(), \\\"Not a participant in this trade deal\\\");\\n        (uint256 returnedDealId, uint256 returnedTokenId) = TradeDealLib._withdrawInvoiceFromTradeDeal(tradeDealId, tokenId);\\n        emit InvoiceWithdrawnFromTradeDeal(returnedDealId, returnedTokenId);\\n    }\\n    \\n    function tdDepositUSDC(uint256 tradeDealId, uint256 amount) external {\\n        require(TradeDealLib._isTradeDealParticipant(tradeDealId, msg.sender) || msg.sender == LibDiamond.contractOwner(), \\\"Not a participant in this trade deal\\\");\\n        (uint256 returnedDealId, uint256 returnedAmount) = TradeDealLib._depositUSDCToTradeDeal(tradeDealId, amount);\\n        emit USDCDepositedToTradeDeal(returnedDealId, returnedAmount);\\n    }\\n    \\n    function tdWithdrawUSDC(uint256 tradeDealId, uint256 amount) external onlyOwner {\\n        (uint256 returnedDealId, uint256 returnedAmount) = TradeDealLib._withdrawUSDCFromTradeDeal(tradeDealId, amount);\\n        emit USDCWithdrawnFromTradeDeal(returnedDealId, returnedAmount);\\n    }\\n    \\n    function tdDistributeInterest(uint256 tradeDealId) external onlyOwner {\\n        TradeDealLib.InterestDistributedParams memory params = TradeDealLib._distributeInterestForTradeDeal(tradeDealId);\\n        emit InterestDistributedForTradeDeal(\\n            params.tradeDealId,\\n            params.totalInterest,\\n            params.invoicePoolInterest,\\n            params.vabiInterest,\\n            params.vabiTokensMinted\\n        );\\n    }\\n    \\n    // Set required claim topics for a trade deal\\n    function setTradeDealRequiredClaimTopics(uint256 tradeDealId, uint256[] memory claimTopics) external onlyOwner {\\n        (uint256 returnedDealId, uint256[] memory returnedTopics) = TradeDealLib._setTradeDealRequiredClaimTopics(tradeDealId, claimTopics);\\n        emit TradeDealRequiredClaimTopicsSet(returnedDealId, returnedTopics);\\n    }\\n    \\n    // Get required claim topics for a trade deal\\n    function getTradeDealRequiredClaimTopics(uint256 tradeDealId) external view returns (uint256[] memory) {\\n        return TradeDealLib._getTradeDealRequiredClaimTopics(tradeDealId);\\n    }\\n    \\n    // Set token addresses for a specific trade deal\\n    function setTradeDealTokenAddresses(\\n        uint256 tradeDealId,\\n        address /* nftAddress */, // This parameter is kept for backward compatibility but not used\\n        address vabbAddress,\\n        address vabiAddress,\\n        address usdcAddress\\n    ) external onlyOwner {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealLib.TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(TradeDealLib._tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        TradeDealLib.TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        tradeDeal.vabbAddress = vabbAddress;\\n        tradeDeal.vabiAddress = vabiAddress;\\n        tradeDeal.usdcAddress = usdcAddress;\\n    }\\n    \\n    // Get token addresses for a specific trade deal\\n    function getTradeDealTokenAddresses(uint256 tradeDealId) external view returns (\\n        address nftAddress,\\n        address vabbAddress,\\n        address vabiAddress,\\n        address usdcAddress\\n    ) {\\n        TradeDealLib.TradeDeal memory tradeDeal = TradeDealLib._getTradeDealInfo(tradeDealId);\\n        return (\\n            address(this), // Return the Diamond address as the NFT address since we're using the Diamond's ERC721PermissionedTokenFacet\\n            tradeDeal.vabbAddress,\\n            tradeDeal.vabiAddress,\\n            tradeDeal.usdcAddress\\n        );\\n    }\\n    \\n    // This function is no longer needed since we're using the Diamond's ERC721PermissionedTokenFacet\\n    // Keeping it as a no-op for backward compatibility\\n    function setTradeDealNFTAddress(uint256 /* tradeDealId */, address /* nftAddress */) external onlyOwner {\\n        // No-op\\n    }\\n}\",\"keccak256\":\"0x75cc52a297528ea410f4662f3a6ae781d1e52440bf784657a22f25165e209269\",\"license\":\"MIT\"},\"contracts/identity/IdentityStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC721A.sol\\\";\\nimport {TrustedIssuer} from \\\"../interfaces/ITrustedIssuersRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport {IIdentity} from \\\"../interfaces/IIdentity.sol\\\";\\nimport {Claim} from \\\"../interfaces/IClaim.sol\\\";\\nimport \\\"../interfaces/IMarketplace.sol\\\";\\nimport \\\"../libraries/TradeDealLib.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary IdentitySystemStorage {\\n    using IdentitySystemStorage for IdentitySystemStorage.IdentitySystem;\\n    using Address for address;\\n\\n    // VabbleStorage struct definition\\n    struct VabbleStorage {\\n        address nft;\\n        address invoicePool;\\n        address vabb;\\n        address usdcPool;\\n        address vabi;\\n        uint256 interestRate;\\n        uint256 vabbToVabiRatio;\\n    }\\n\\n    error ApprovalCallerNotOwnerNorApproved();\\n    error ApprovalQueryForNonexistentToken();\\n    error ApproveToCaller();\\n    error ApprovalToCurrentOwner();\\n    error BalanceQueryForZeroAddress();\\n    error MintedQueryForZeroAddress();\\n    error BurnedQueryForZeroAddress();\\n    error AuxQueryForZeroAddress();\\n    error MintToZeroAddress();\\n    error MintZeroQuantity();\\n    error OwnerIndexOutOfBounds();\\n    error OwnerQueryForNonexistentToken();\\n    error TokenIndexOutOfBounds();\\n    error TransferCallerNotOwnerNorApproved();\\n    error TransferFromIncorrectOwner();\\n    error TransferToNonERC721ReceiverImplementer();\\n    error TransferToZeroAddress();\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    struct IdentitySystem {\\n        // ERC721A storage\\n        ERC721AContract erc721Contract;\\n        // TrustedIssuer storage\\n        mapping(address => TrustedIssuer) trustedIssuers;\\n        address[] trustedIssuerAddresses;\\n        mapping(address => mapping(uint256 => bool)) trustedIssuerClaimTopics;\\n        mapping(address => uint256[]) trustedIssuerClaimTopicsList;\\n        mapping(uint256 => bool) topics;\\n        uint256[] topicList;\\n        // Identity storage\\n        mapping(address => address) identities;\\n        mapping(address => address) identityOwnersMap;\\n        address[] identityOwners;\\n        // Claim storage\\n        mapping(address => mapping(uint256 => uint256)) claims;\\n        mapping(address => uint256[]) claimList;\\n        // Claim storage\\n        mapping(uint256 => Claim) tokenClaims;\\n        Claim[] tokenClaimList;\\n        // ERC721Permissioned storage\\n        address delegatedMinter;\\n        mapping(uint256 => bool) frozen;\\n\\n        uint256 itemIds;\\n        uint256 itemsSold;\\n        mapping(uint256 => MarketItem) idToMarketItem;\\n        mapping(uint256 => bool) idToListed;\\n        MarketItem[] items;\\n        \\n        // Vabble storage\\n        VabbleStorage vabbleStorage;\\n        \\n        // Trade Deal storage\\n        TradeDealLib.TradeDealStorage tradeDealStorage;\\n    }\\n\\n    bytes32 constant IDENTITY_SYSTEM_STORAGE_POSITION =\\n        keccak256(\\\"diamond.identity.system.storage\\\");\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (IdentitySystemStorage.IdentitySystem storage ds)\\n    {\\n        bytes32 position = IDENTITY_SYSTEM_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function _tokenExists(\\n        IdentitySystem storage self,\\n        uint256 _tokenId\\n    ) internal view returns (bool) {\\n        return self.erc721Contract._ownerships[_tokenId].addr != address(0);\\n    }\\n\\n    function _getIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (address addr) {\\n        return self.identities[_userAddress];\\n    }\\n\\n    function getIdentityOwner(\\n        IdentitySystem storage self,\\n        address _identity\\n    ) internal view returns (address) {\\n        return self.identityOwnersMap[_identity];\\n    }\\n\\n    function isIdentityAddress(\\n        IdentitySystem storage self,\\n        address _identity\\n    ) internal view returns (bool) {\\n        return self.identityOwnersMap[_identity] != address(0);\\n    }\\n\\n    function isRegistered(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return self.identities[_userAddress] != address(0);\\n    }\\n\\n    function isIdentityOwner(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return\\n            self.identityOwnersMap[self.identities[_userAddress]] ==\\n            _userAddress;\\n    }\\n\\n    // trusted issuer\\n\\n    function isTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _issuer\\n    ) internal view returns (bool) {\\n        return self.trustedIssuers[_issuer].claimIssuer != address(0);\\n    }\\n\\n    function addTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _trustedIssuer,\\n        uint[] calldata _claimTopics\\n    ) internal {\\n        self.trustedIssuers[_trustedIssuer] = TrustedIssuer({\\n            claimIssuer: _trustedIssuer,\\n            claimTopics: _claimTopics\\n        });\\n        self.trustedIssuerAddresses.push(_trustedIssuer);\\n    }\\n\\n    function removeTrustedIssuer(\\n        IdentitySystem storage self,\\n        address _trustedIssuer\\n    ) internal {\\n        delete self.trustedIssuers[_trustedIssuer];\\n        for (uint256 i = 0; i < self.trustedIssuerAddresses.length; i++) {\\n            if (self.trustedIssuerAddresses[i] == _trustedIssuer) {\\n                self.trustedIssuerAddresses[i] = self.trustedIssuerAddresses[\\n                    self.trustedIssuerAddresses.length - 1\\n                ];\\n                self.trustedIssuerAddresses.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    // claim topics\\n\\n    function addClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        self.topics[_claimTopic] = true;\\n        self.topicList.push(_claimTopic);\\n    }\\n\\n    function removeClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        delete self.topics[_claimTopic];\\n        for (uint256 i = 0; i < self.topicList.length; i++) {\\n            if (self.topicList[i] == _claimTopic) {\\n                self.topicList[i] = self.topicList[self.topicList.length - 1];\\n                self.topicList.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getClaimTopics(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256[] memory) {\\n        return self.topicList;\\n    }\\n\\n    function hasClaimTopic(\\n        IdentitySystem storage self,\\n        uint256 _claimTopic\\n    ) internal view returns (bool) {\\n        return self.topics[_claimTopic];\\n    }\\n\\n    // trusted issuer / claim topics\\n\\n    function updateIssuerClaimTopics(\\n        IdentitySystem storage self,\\n        address _trustedIssuer,\\n        uint[] calldata _claimTopics\\n    ) internal {\\n        self.trustedIssuers[_trustedIssuer].claimTopics = _claimTopics;\\n        for (\\n            uint256 i = 0;\\n            i < self.trustedIssuerClaimTopicsList[_trustedIssuer].length;\\n            i++\\n        ) {\\n            delete self.trustedIssuerClaimTopics[_trustedIssuer][\\n                self.trustedIssuerClaimTopicsList[_trustedIssuer][i]\\n            ];\\n        }\\n    }\\n\\n    function addTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint _claimTopic\\n    ) internal {\\n        self.trustedIssuerClaimTopics[_issuer][_claimTopic] = true;\\n        self.trustedIssuerClaimTopicsList[_issuer].push(_claimTopic);\\n    }\\n\\n    function removeTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint _claimTopic\\n    ) internal {\\n        delete self.trustedIssuerClaimTopics[_issuer][_claimTopic];\\n        for (\\n            uint256 i = 0;\\n            i < self.trustedIssuerClaimTopicsList[_issuer].length;\\n            i++\\n        ) {\\n            if (self.trustedIssuerClaimTopicsList[_issuer][i] == _claimTopic) {\\n                self.trustedIssuerClaimTopicsList[_issuer][i] = self\\n                    .trustedIssuerClaimTopicsList[_issuer][\\n                        self.trustedIssuerClaimTopicsList[_issuer].length - 1\\n                    ];\\n                self.trustedIssuerClaimTopicsList[_issuer].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    modifier isTrustedIssuerForClaimTopic(uint256 _claimTopic) {\\n        IdentitySystem storage _storage = IdentitySystemStorage.diamondStorage();\\n        require(_storage.isTrustedIssuer(msg.sender), \\\"Not a trusted issuer\\\");\\n        require(\\n            _storage.hasTrustedIssuerClaimTopic(msg.sender, _claimTopic),\\n            \\\"Issuer not authorized for claim topic\\\"\\n        );\\n        _;\\n    }\\n\\n    function hasTrustedIssuerClaimTopic(\\n        IdentitySystem storage self,\\n        address _issuer,\\n        uint256 _claimTopic\\n    ) internal view returns (bool) {\\n        if (!self.isTrustedIssuer(_issuer)) return false;\\n        uint256[] storage claimTopics = self\\n            .trustedIssuers[_issuer]\\n            .claimTopics;\\n        for (uint256 i = 0; i < claimTopics.length; i++) {\\n            if (claimTopics[i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function addIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress,\\n        address _identity\\n    ) internal {\\n        self.identities[_userAddress] = _identity;\\n        self.identityOwners.push(_userAddress);\\n        self.identityOwnersMap[_identity] = _userAddress;\\n    }\\n\\n    function removeIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal {\\n        delete self.identities[_userAddress];\\n        for (uint256 i = 0; i < self.identityOwners.length; i++) {\\n            if (self.identityOwners[i] == _userAddress) {\\n                self.identityOwners[i] = self.identityOwners[\\n                    self.identityOwners.length - 1\\n                ];\\n                self.identityOwners.pop();\\n                self.identityOwnersMap[self.identities[_userAddress]] = address(\\n                    0\\n                );\\n                break;\\n            }\\n        }\\n    }\\n\\n    function hasIdentity(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        address identity = self.identities[_userAddress];\\n        return identity != address(0);\\n    }\\n\\n    function hasClaims(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return self.identities[_userAddress] != address(0);\\n    }\\n\\n    function isVerified(\\n        IdentitySystem storage self,\\n        address _userAddress\\n    ) internal view returns (bool) {\\n        return hasIdentity(self, _userAddress) && hasClaims(self, _userAddress);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        IdentitySystem storage self,\\n        address msgSender,\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        uint256 startTokenId = self.erc721Contract._currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        self._beforeTokenTransfer(address(0), to, startTokenId, true);\\n\\n        unchecked {\\n        \\n            self.erc721Contract._addressData[to].balance += uint64(quantity);\\n            self.erc721Contract._addressData[to].numberMinted += uint64(quantity);\\n\\n            self.erc721Contract._ownerships[startTokenId].addr = to;\\n            self.erc721Contract._ownerships[startTokenId].startTimestamp = uint64(\\n                block.timestamp\\n            );\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            // log quantity\\n            console.log(\\\"Minting %s tokens to %s\\\", quantity, to);\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (\\n                    safe &&\\n                    !_checkOnERC721Received(\\n                        msgSender,\\n                        address(0),\\n                        to,\\n                        updatedIndex,\\n                        _data\\n                    )\\n                ) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                console.log(\\\"Minted token %s to %s\\\", updatedIndex, to);\\n                self.erc721Contract._currentIndex = updatedIndex + 1;\\n                updatedIndex++;\\n            }\\n        }\\n\\n        _afterTokenTransfer(self, address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(self.erc721Contract._addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint64) {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        return self.erc721Contract._addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(\\n        IdentitySystem storage self,\\n        address owner,\\n        uint64 aux\\n    ) internal {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        self.erc721Contract._addressData[owner].aux = aux;\\n    }\\n\\n    function ownershipOf(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n        unchecked {\\n            if (curr < self.erc721Contract._currentIndex) {\\n                TokenOwnership memory ownership = self.erc721Contract._ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = self.erc721Contract._ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (bool) {\\n        return\\n            tokenId < self.erc721Contract._currentIndex && !self.erc721Contract._ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        if (!_exists(self, tokenId)) revert ApprovalQueryForNonexistentToken();\\n        return self.erc721Contract._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(\\n        IdentitySystem storage self,\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        self.erc721Contract._operatorApprovals[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        IdentitySystem storage self,\\n        address owner,\\n        address operator\\n    ) internal view returns (bool) {\\n        return self.erc721Contract._operatorApprovals[owner][operator];\\n    }\\n\\n    function currentIndex(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256) {\\n        return self.erc721Contract._currentIndex;\\n    }\\n    \\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        IdentitySystem storage self,\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bool _force\\n    ) internal {\\n        TokenOwnership memory prevOwnership = self.ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (msgSender == prevOwnership.addr ||\\n            self.isApprovedForAll(prevOwnership.addr, msgSender) ||\\n            self.getApproved(tokenId) == msgSender);\\n\\n        if (!isApprovedOrOwner && !_force)\\n            revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from && !_force) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        self._beforeTokenTransfer(from, to, tokenId, _force);\\n\\n        if (from == address(0)) {\\n            self._addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            self._removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            self._removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            self._addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        // Clear approvals from the previous owner\\n        self._approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            self.erc721Contract._addressData[from].balance -= 1;\\n            self.erc721Contract._addressData[to].balance += 1;\\n\\n            self.erc721Contract._ownerships[tokenId].addr = to;\\n            self.erc721Contract._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self.erc721Contract._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self.erc721Contract._currentIndex) {\\n                    self.erc721Contract._ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    self.erc721Contract._ownerships[nextTokenId].startTimestamp = prevOwnership\\n                        .startTimestamp;\\n                }\\n            }\\n        }\\n        \\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfer(self, from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(IdentitySystem storage self, uint256 tokenId) internal {\\n        TokenOwnership memory prevOwnership = ownershipOf(self, tokenId);\\n\\n        self._beforeTokenTransfer(prevOwnership.addr, address(0), tokenId, true);\\n\\n        // Clear approvals from the previous owner\\n        _approve(self, address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            self.erc721Contract._addressData[prevOwnership.addr].balance -= 1;\\n            self.erc721Contract._addressData[prevOwnership.addr].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            self.erc721Contract._ownerships[tokenId].addr = prevOwnership.addr;\\n            self.erc721Contract._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            self.erc721Contract._ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self.erc721Contract._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self.erc721Contract._currentIndex) {\\n                    self.erc721Contract._ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    self.erc721Contract._ownerships[nextTokenId].startTimestamp = prevOwnership\\n                        .startTimestamp;\\n                }\\n            }\\n        }\\n\\n        self._removeTokenFromOwnerEnumeration(msg.sender, tokenId);\\n        self._removeTokenFromAllTokensEnumeration(tokenId);\\n\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\n        _afterTokenTransfer(self, prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            self.erc721Contract._burnCounter++;\\n        }\\n    }\\n\\n    function exists(IdentitySystem storage self, uint256 tokenId) internal view returns (bool) {\\n        return _exists(self, tokenId);\\n    }\\n\\n\\n    function setTokenClaimTopics(IdentitySystem storage self, uint256 tokenId, uint256[] memory claimTopics) internal {\\n        require(self.exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        for (uint256 i = 0; i < claimTopics.length; i++) {\\n            self.tokenClaims[tokenId] = Claim({\\n                topic: claimTopics[i],\\n                scheme: 0,\\n                issuer: address(this),\\n                signature: \\\"\\\",\\n                data: \\\"\\\",\\n                uri: \\\"\\\"\\n            });\\n        }\\n    }\\n\\n    function getTokenClaimTopics(uint256 tokenId) public view returns (Claim[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage identitySystem = IdentitySystemStorage.diamondStorage();\\n        require(identitySystem._exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        Claim[] memory claimTopics = new Claim[](identitySystem.tokenClaimList.length);\\n        for (uint256 i = 0; i < identitySystem.tokenClaimList.length; i++) {\\n            claimTopics[i] = identitySystem.tokenClaims[tokenId];\\n        }\\n        return claimTopics;\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        IdentitySystem storage self,\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) internal {\\n        self.erc721Contract._tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    function _ownerOf(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal view returns (address) {\\n        return ownershipOf(self, tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    msgSender,\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function tokensOfOwner(\\n        IdentitySystem storage self,\\n        address owner\\n    ) internal view returns (uint256[] memory) {\\n        require(owner != address(0), \\\"IdentityStorage: owner query for zero address\\\");\\n        \\n        uint256 ownerTokenCount = IERC721(address(this)).balanceOf(owner);\\n        if (ownerTokenCount == 0) {\\n            // Return an empty array\\n            return new uint256[](0);\\n        }\\n        \\n        uint256[] memory tokens = new uint256[](ownerTokenCount);\\n        for (uint256 i = 0; i < ownerTokenCount; i++) {\\n            tokens[i] = self.erc721Contract._ownedTokens[owner][i];\\n        }\\n        \\n        return tokens;\\n    }\\n\\n    function tokenOfOwnerByIndex(\\n        IdentitySystem storage self,\\n        address owner, \\n        uint256 index) internal view returns (uint256) {\\n        require(index < IERC721(address(this)).balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return self.erc721Contract._ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply(\\n        IdentitySystem storage self\\n    ) internal view returns (uint256) {\\n        return self.erc721Contract._allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(\\n        IdentitySystem storage self,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        require(index < totalSupply(self), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return self.erc721Contract._allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(\\n        IdentitySystem storage self,\\n        address to, \\n        uint256 tokenId) internal {\\n        uint256 length = IERC721(address(this)).balanceOf(to);\\n        self.erc721Contract._ownedTokens[to][length] = tokenId;\\n        self.erc721Contract._ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(\\n        IdentitySystem storage self,\\n        uint256 tokenId) internal {\\n        self.erc721Contract._allTokensIndex[tokenId] = self.erc721Contract._allTokens.length + 1;\\n        self.erc721Contract._allTokens.push(tokenId);\\n    }\\n\\n    function _getIdentityAddress(IdentitySystem storage self, address _address) internal view returns (address) {\\n        address identityAddress = self._getIdentity(_address);\\n        return identityAddress != address(0) ? identityAddress : _address;\\n    }\\n\\n    function _hasClaim(IdentitySystem storage self, address _address, uint256 _claimTopic) internal view returns (bool) {\\n        address idObj = self._getIdentityAddress(_address);\\n        for (uint256 i = 0; i < self.claimList[idObj].length; i++) {\\n            if (self.claimList[idObj][i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(\\n        IdentitySystem storage self,\\n        address from,\\n        uint256 tokenId\\n    ) internal {\\n        address owner = IERC721(address(this)).ownerOf(tokenId);\\n        address thisAddress = address(this);\\n\\n        console.log(\\\"owner:\\\", owner);\\n        console.log(\\\"this:\\\", thisAddress);\\n\\n        // require(owner == thisAddress, \\\"ERC721: transfer of token that is not own\\\");\\n        uint256 lastTokenIndex = IERC721(thisAddress).balanceOf(from) - 1; \\n        uint256 tokenIndex = self.erc721Contract._ownedTokensIndex[tokenId];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = self.erc721Contract._ownedTokens[from][lastTokenIndex];\\n\\n            self.erc721Contract._ownedTokens[from][tokenIndex] = lastTokenId;\\n            self.erc721Contract._ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        delete self.erc721Contract._ownedTokensIndex[tokenId];\\n        delete self.erc721Contract._ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(\\n        IdentitySystem storage self,\\n        uint256 tokenId\\n    ) internal {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n        uint256 lastTokenIndex = self.erc721Contract._allTokens.length - 1;\\n        uint256 tokenIndex = self.erc721Contract._allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = self.erc721Contract._allTokens[lastTokenIndex];\\n\\n        self.erc721Contract._allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        self.erc721Contract._allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete self.erc721Contract._allTokensIndex[tokenId];\\n        self.erc721Contract._allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n\\n    function _beforeTokenTransfer(\\n        IdentitySystem storage self,\\n        address from,\\n        address to,\\n        uint256,\\n        bool force\\n    ) internal view {\\n        console.log(\\\"_beforeTokenTransfers called\\\");\\n        console.log(\\\"from: \\\", from);\\n        console.log(\\\"to: \\\", to);\\n        if (force) {\\n            console.log(\\\"forced\\\");\\n            return;\\n        }\\n\\n        // Allow transfers from or to the contract itself without additional checks\\n        if (from == address(this) || to == address(this)) {\\n            console.log(\\n                \\\"Transfer involves the contract itself, skipping checks\\\"\\n            );\\n            return;\\n        }\\n\\n        bool hasCommonClaim = false;\\n        uint256 claimType = 1; // Start from claim type 1\\n\\n        while (!hasCommonClaim) {\\n            bool hasFromClaim = self._hasClaim(from, claimType) ||\\n                from == address(this);\\n            if (hasFromClaim && self._hasClaim(to, claimType)) {\\n                hasCommonClaim = true;\\n            } else {\\n                claimType++;\\n                if (claimType == 0) {\\n                    // Overflow, we've checked all possible claim types\\n                    break;\\n                }\\n            }\\n        }\\n\\n        require(\\n            hasCommonClaim,\\n            \\\"ERC721: sender and receiver do not have a common claim\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfer(\\n        IdentitySystem storage self,\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal {}\\n}\\n\",\"keccak256\":\"0xd9c753b7b44f5317201e3a49a100486450a62e3887dfb10bc32da9315fabf2ef\",\"license\":\"MIT\"},\"contracts/interfaces/IClaim.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n}\",\"keccak256\":\"0xb104f9f6208a657a595ec893c71f3393e192919b918f51ebd8727ecdffdaadc8\",\"license\":\"MIT\"},\"contracts/interfaces/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n    bool isRemoved;\\n}\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\\n    \\n}\",\"keccak256\":\"0xf94927c44289cafe7442ff3e69f6949f3f97ab784a27b0b5d79f3757da7f1dd8\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x07ab94171f8bf7530b1925a870887671702c22cdebe78952c9dda46eaad01c54\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x65006dc04090531acd9805684a1f27252b8abb0c1990fcf0ba8db33f50791a0d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/* solhint-disable indent */\\n\\n// Compiler will pack this into a single 256bit word.\\nstruct TokenOwnership {\\n    address addr; // The address of the owner.\\n    uint64 startTimestamp; // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n    bool burned; // Whether the token has been burned.\\n}\\n\\n// Compiler will pack this into a single 256bit word.\\nstruct AddressData {\\n    \\n    uint64 balance; // Realistically, 2**64-1 is more than enough.\\n    uint64 numberMinted; // Keeps track of mint count with minimal overhead for tokenomics.\\n    uint64 numberBurned; // Keeps track of burn count with minimal overhead for tokenomics.\\n    // For miscellaneous variable(s) pertaining to the address\\n    // (e.g. number of whitelist mint slots used).\\n    // If there are multiple variables, please pack them into a uint64.\\n    uint64 aux;\\n}\\n\\nstruct ERC721AContract {\\n    // The tokenId of the next token to be minted.\\n    uint256 _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 _burnCounter;\\n\\n    // Token name\\n    string _name;\\n\\n    // Token symbol\\n    string _symbol;\\n\\n    // the base uri\\n    string __uri;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) _operatorApprovals;\\n    \\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) _allTokensIndex;\\n}\\n\",\"keccak256\":\"0xc93162a8658643d377f28a9d0f79f7fa4269ada3504d490dfdd7f544671dda1a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC721Permissioned {\\n\\n    event TransferForced(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event DelegatedMinterSet(address indexed newDelegatedMinter);\\n    event Mint(address indexed to, uint256 indexed tokenId);\\n    event Burn(address indexed from, uint256 indexed tokenId);\\n    event Freeze(address indexed from, uint256 indexed tokenId);\\n    event FreezeBatch(address indexed from, uint256[] tokenIds);\\n    event Release(address indexed from, uint256 indexed tokenId);\\n\\n    // force a transfer from the user to the to address irrepective of registry\\n    // TODO: Does this mean that the transfer will go even if both addresses aren't\\n    //      registered? If so, this is a security issue.\\n    function forcedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external returns (bool);\\n\\n    function setDelegatedMinter(address _newDelegatedMinter) external returns (bool);\\n    function delegatedMinter() external view returns (address);\\n\\n    function mint(address _to, bytes calldata data) external returns (uint256);\\n    function burn(uint256 _tokenId) external returns (bool);\\n\\n    function freeze(uint256 tokenID) external;\\n    function release(uint256 tokenID) external;\\n\\n}\\n\",\"keccak256\":\"0xb3f9c69ddfc01e8fb43822dbab1c213a7719ae09f1edc0bbdd5def2f85dc469d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\n\\ninterface IERC734 is IERC165 {\\n    // events\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event ExecutionRequested(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    // functions\\n    // setters\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n    function removeKey(bytes32 _key, uint256 _purpose) external;\\n    function approve(uint256 _id, bool _approve) external;\\n\\n    // getters\\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\\n}\\n\",\"keccak256\":\"0xa1bbf071037ac2d697a9134e90ac01a4ca93b206d15283182d8d01f7edda46c0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC735 {\\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n\\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\\n    function addClaim(\\n        uint256 _topic, \\n        uint256 _scheme, \\n        address _issuer, \\n        bytes memory _signature, \\n        bytes memory _data, \\n        string memory _uri) external returns (uint256 claimRequestId);\\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n}\\n\\n/*\\nHow IdentityRegistry works:\\n\\n1. User creates an Identity contract\\n2. User calls IdentityRegistry.addIdentity(address _identity, IIdentity identityData)\\n3. IdentityRegistry emits IdentityAdded(address indexed _address, IIdentity identity)\\n4. IdentityRegistry emits ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim)\\n5. IdentityRegistry emits WalletLinked(address indexed walletAddress, bytes32 indexed onchainID)\\n\\n*/\",\"keccak256\":\"0xd9696a4c45abd2c8e0cc7cd8f02bd18612d0dcb0c573c928ab225de624c01d92\",\"license\":\"MIT\"},\"contracts/interfaces/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC734 } from \\\"./IERC734.sol\\\";\\nimport { IERC735 } from \\\"./IERC735.sol\\\";\\n\\ninterface IIdentity is IERC734, IERC735 {\\n    function isVerified() external view returns (bool);\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x3441179ea9b419fccd103fa16dad25300acb771897159f124aeb816d93552044\",\"license\":\"MIT\"},\"contracts/interfaces/IInvoicePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IInvoicePool {\\n    function depositInvoice(uint256 tokenId) external;\\n    function withdrawInvoice(uint256 tokenId) external;\\n    function getInvoiceCount() external view returns (uint256);\\n    function getInvoiceTokenId(uint256 index) external view returns (uint256);\\n}\",\"keccak256\":\"0xb291b531707b70d8ca8a7a299d06518a95e53ac2a9e969d091f13fc0c38bf2ef\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct MarketItem {\\n    address nftContract;\\n    uint256 tokenId;\\n    address seller;\\n    address owner;\\n    uint256 price;\\n    bool sold;\\n    address receiver;\\n    address paymentToken;\\n}\\n\\ninterface IMarketplace {\\n\\n    event Bids(uint256 indexed itemId, address bidder, uint256 amount);\\n    event Sales(address indexed tokenAddress, uint256 indexed tokenId, address indexed owner);\\n\\n    event Listings(\\n        address indexed nftContract,\\n        uint256 indexed tokenId,\\n        address seller,\\n        address receiver,\\n        address owner,\\n        uint256 price,\\n        bool sold,\\n        address paymentToken\\n    );\\n    event Delisted(uint256 indexed itemId);\\n\\n    function listItem(\\n        address nftContract,\\n        address payable receiver,\\n        uint256 tokenId,\\n        uint256 price,\\n        bool transferNFT,\\n        address paymentToken\\n    ) external payable;\\n\\n    function delistItem(address nftContract, uint256 itemId) external;\\n\\n    function purchaseItem(address nftContract, uint256 itemId) external payable;\\n\\n    function fetchItems() external view returns (MarketItem[] memory);\\n\\n    function fetchItem(address nftContract, uint256 tokenId) external view returns (MarketItem memory);\\n\\n}\\n\",\"keccak256\":\"0xac028b4cdffda44437ed4a52e5d16512042dd57f14bdd5d65b5a18e33152de90\",\"license\":\"MIT\"},\"contracts/interfaces/INFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface INFT {\\n    function mint(address to, uint256 tokenId, string memory metadata) external;\\n    function burn(uint256 tokenId) external;\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function getMetadata(uint256 tokenId) external view returns (string memory);\\n}\",\"keccak256\":\"0x85b6f25cebd3a3e39101fc19c64f9a475dc9bc59c1d50381446fc96548a2cf96\",\"license\":\"MIT\"},\"contracts/interfaces/ITrustedIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"./IClaimIssuer.sol\\\";\\n\\nstruct TrustedIssuer {\\n    address claimIssuer;\\n    uint[] claimTopics;\\n}\\n\\ninterface ITrustedIssuersRegistry {\\n\\n    // events\\n    event TrustedIssuerAdded(address indexed trustedIssuer, uint[] claimTopics);\\n    event TrustedIssuerRemoved(address indexed trustedIssuer);\\n    event ClaimTopicsUpdated(address indexed trustedIssuer, uint[] claimTopics);\\n\\n    // functions\\n    // setters\\n    function addTrustedIssuer(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n    function removeTrustedIssuer(address _trustedIssuer) external;\\n    function updateIssuerClaimTopics(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n\\n    // getters\\n    function getTrustedIssuer(address issuerAddress) external view returns (TrustedIssuer memory);\\n    function getTrustedIssuers() external view returns (TrustedIssuer[] memory);\\n    function isTrustedIssuer(address _issuer) external view returns(bool);\\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory);\\n    function hasTrustedIssuerClaimTopic(address _issuer, uint _claimTopic) external view returns(bool);\\n\\n}\",\"keccak256\":\"0xe614225074d3e906995b5730a4d70e0a97aeba0140ab4391e1e5968e8dca7a5d\",\"license\":\"MIT\"},\"contracts/interfaces/IUSDCPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUSDCPool {\\n    function deposit(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function getBalance() external view returns (uint256);\\n    function distributeInterest() external;\\n}\",\"keccak256\":\"0x3d9b699c7f3efbfc17865e076d0cab7a65243384876bda78cf19595256623b0c\",\"license\":\"MIT\"},\"contracts/interfaces/IVABB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVABB {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5a9c374628a281fd9c9c0ec5a3ae521d4cba29ed45e3c8145548b378c36faf4d\",\"license\":\"MIT\"},\"contracts/interfaces/IVABI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVABI {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\",\"keccak256\":\"0x788db947a177b2b6f1fcbd9d9cf4a98b9efd2fd6dac7fc4b106162884cc3b042\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x490cade6c8c25dc15bd7384ce9a417178223c029e26e70e5983dc0007f7fb6ef\",\"license\":\"MIT\"},\"contracts/libraries/TradeDealLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../identity/IdentityStorage.sol\\\";\\nimport \\\"./VabbleLib.sol\\\";\\nimport \\\"../interfaces/IVABB.sol\\\";\\nimport \\\"../interfaces/IVABI.sol\\\";\\nimport \\\"../interfaces/IUSDCPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC721Permissioned.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary TradeDealLib {\\n    // Event parameter structs for returning event data to facets\\n    struct TradeDealCreatedParams {\\n        uint256 tradeDealId;\\n        string name;\\n        string symbol;\\n        uint256 interestRate;\\n        uint256 vabbToVabiRatio;\\n        bool active;\\n        address nftAddress;\\n        address vabbAddress;\\n        address vabiAddress;\\n        address usdcAddress;\\n    }\\n    \\n    struct TradeDealUpdatedParams {\\n        uint256 tradeDealId;\\n        string name;\\n        string symbol;\\n        uint256 interestRate;\\n        uint256 vabbToVabiRatio;\\n        bool active;\\n        address vabbAddress;\\n        address vabiAddress;\\n        address usdcAddress;\\n    }\\n    \\n    struct InterestDistributedParams {\\n        uint256 tradeDealId;\\n        uint256 totalInterest;\\n        uint256 invoicePoolInterest;\\n        uint256 vabiInterest;\\n        uint256 vabiTokensMinted;\\n    }\\n    // Trade Deal data structure\\n    struct TradeDeal {\\n        uint256 id;\\n        string name;\\n        string symbol;           // Symbol for the trade deal, used for VABB token\\n        uint256 interestRate;\\n        uint256 vabbToVabiRatio;\\n        bool active;\\n        uint256[] requiredClaimTopics; // Claim topics required for participation\\n        address vabbAddress;     // Address of the VABB token contract for this trade deal\\n        address vabiAddress;     // Address of the VABI token contract for this trade deal\\n        address usdcAddress;     // Address of the USDC token contract for this trade deal\\n    }\\n    \\n    // Extended VabbleStorage to support trade deals\\n    struct TradeDealStorage {\\n        // Trade deal tracking\\n        mapping(uint256 => TradeDeal) tradeDeals;\\n        uint256[] tradeDealIds;\\n        uint256 nextTradeDealId;\\n        \\n        // Per-trade deal mappings\\n        mapping(uint256 => uint256[]) tradeDealInvoices; // Trade deal ID => array of invoice token IDs\\n        mapping(uint256 => uint256) tradeDealUsdcBalances; // Trade deal ID => USDC balance\\n        mapping(uint256 => mapping(address => bool)) tradeDealParticipants; // Trade deal ID => user address => is participant\\n        mapping(uint256 => uint256[]) tradeDealRequiredClaimTopics; // Trade deal ID => array of required claim topics\\n    }\\n    \\n    // Create a new trade deal\\n    function _createTradeDeal(\\n        string memory name,\\n        string memory symbol,\\n        uint256 interestRate,\\n        uint256 vabbToVabiRatio,\\n        uint256[] memory requiredClaimTopics,\\n        address vabbAddress,\\n        address vabiAddress,\\n        address usdcAddress\\n    ) internal returns (TradeDealCreatedParams memory, bool, uint256[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        uint256 tradeDealId = tds.nextTradeDealId++;\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        tradeDeal.id = tradeDealId;\\n        tradeDeal.name = name;\\n        tradeDeal.symbol = symbol;\\n        tradeDeal.interestRate = interestRate;\\n        tradeDeal.vabbToVabiRatio = vabbToVabiRatio;\\n        tradeDeal.active = true;\\n        \\n        // Check if we should use the VABBTokenFactoryFacet to create a new VABB token\\n        if (vabbAddress == address(0)) {\\n            // Try to create a new VABB token\\n            vabbAddress = _createOrGetVABBToken(tradeDealId, symbol);\\n        }\\n        \\n        tradeDeal.vabbAddress = vabbAddress;\\n        tradeDeal.vabiAddress = vabiAddress;\\n        tradeDeal.usdcAddress = usdcAddress;\\n        \\n        // Set required claim topics\\n        if (requiredClaimTopics.length > 0) {\\n            for (uint256 i = 0; i < requiredClaimTopics.length; i++) {\\n                tradeDeal.requiredClaimTopics.push(requiredClaimTopics[i]);\\n                tds.tradeDealRequiredClaimTopics[tradeDealId].push(requiredClaimTopics[i]);\\n            }\\n        }\\n        \\n        tds.tradeDealIds.push(tradeDealId);\\n        \\n        // Create event parameters struct instead of emitting event\\n        TradeDealCreatedParams memory params = TradeDealCreatedParams({\\n            tradeDealId: tradeDealId,\\n            name: name,\\n            symbol: symbol,\\n            interestRate: interestRate,\\n            vabbToVabiRatio: vabbToVabiRatio,\\n            active: true,\\n            nftAddress: address(0), // Use address(0) for nftAddress since we're using the Diamond's ERC721PermissionedTokenFacet\\n            vabbAddress: vabbAddress,\\n            vabiAddress: vabiAddress,\\n            usdcAddress: usdcAddress\\n        });\\n        \\n        // Return the event parameters and whether claim topics were set\\n        bool hasClaimTopics = requiredClaimTopics.length > 0;\\n        \\n        return (params, hasClaimTopics, requiredClaimTopics);\\n    }\\n    \\n    // Update an existing trade deal\\n    function _updateTradeDeal(\\n        uint256 tradeDealId,\\n        string memory name,\\n        string memory symbol,\\n        uint256 interestRate,\\n        uint256 vabbToVabiRatio,\\n        address vabbAddress,\\n        address vabiAddress,\\n        address usdcAddress\\n    ) internal returns (TradeDealUpdatedParams memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        tradeDeal.name = name;\\n        tradeDeal.symbol = symbol;\\n        tradeDeal.interestRate = interestRate;\\n        tradeDeal.vabbToVabiRatio = vabbToVabiRatio;\\n        tradeDeal.vabbAddress = vabbAddress;\\n        tradeDeal.vabiAddress = vabiAddress;\\n        tradeDeal.usdcAddress = usdcAddress;\\n        \\n        // Create and return event parameters instead of emitting event\\n        return TradeDealUpdatedParams({\\n            tradeDealId: tradeDealId,\\n            name: name,\\n            symbol: symbol,\\n            interestRate: interestRate,\\n            vabbToVabiRatio: vabbToVabiRatio,\\n            active: tradeDeal.active,\\n            vabbAddress: vabbAddress,\\n            vabiAddress: vabiAddress,\\n            usdcAddress: usdcAddress\\n        });\\n    }\\n    \\n    // Activate a trade deal\\n    function _activateTradeDeal(uint256 tradeDealId) internal returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDeals[tradeDealId].active = true;\\n        \\n        // Return the trade deal ID for event emission in the facet\\n        return tradeDealId;\\n    }\\n    \\n    // Deactivate a trade deal\\n    function _deactivateTradeDeal(uint256 tradeDealId) internal returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDeals[tradeDealId].active = false;\\n        \\n        // Return the trade deal ID for event emission in the facet\\n        return tradeDealId;\\n    }\\n    \\n    // Check if a trade deal exists\\n    function _tradeDealExists(uint256 tradeDealId) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        return tradeDealId < tds.nextTradeDealId && tds.tradeDeals[tradeDealId].id == tradeDealId;\\n    }\\n    \\n    // Get trade deal info\\n    function _getTradeDealInfo(uint256 tradeDealId) internal view returns (TradeDeal memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDeals[tradeDealId];\\n    }\\n    \\n    // Get all trade deal IDs\\n    function _getAllTradeDealIds() internal view returns (uint256[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        return tds.tradeDealIds;\\n    }\\n    \\n    // Participant management\\n    function _addTradeDealParticipant(uint256 tradeDealId, address participant) internal returns (uint256, address) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDealParticipants[tradeDealId][participant] = true;\\n        \\n        // Return data for event emission in the facet\\n        return (tradeDealId, participant);\\n    }\\n    \\n    function _removeTradeDealParticipant(uint256 tradeDealId, address participant) internal returns (uint256, address) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        tds.tradeDealParticipants[tradeDealId][participant] = false;\\n        \\n        // Return data for event emission in the facet\\n        return (tradeDealId, participant);\\n    }\\n    \\n    function _isTradeDealParticipant(uint256 tradeDealId, address user) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // First check if the user is explicitly added as a participant\\n        if (tds.tradeDealParticipants[tradeDealId][user]) {\\n            return true;\\n        }\\n        \\n        // If no required claim topics are set, only explicit participants are allowed\\n        if (tds.tradeDealRequiredClaimTopics[tradeDealId].length == 0) {\\n            return false;\\n        }\\n        \\n        // Check if the user has any of the required claim topics\\n        address identityAddress = ds.identities[user];\\n        if (identityAddress == address(0)) {\\n            return false; // User has no identity\\n        }\\n        \\n        // Get the user's claims\\n        uint256[] storage userClaims = ds.claimList[identityAddress];\\n        \\n        // Check if the user has any of the required claim topics\\n        for (uint256 i = 0; i < tds.tradeDealRequiredClaimTopics[tradeDealId].length; i++) {\\n            uint256 requiredClaimTopic = tds.tradeDealRequiredClaimTopics[tradeDealId][i];\\n            \\n            for (uint256 j = 0; j < userClaims.length; j++) {\\n                if (userClaims[j] == requiredClaimTopic) {\\n                    return true; // User has a required claim\\n                }\\n            }\\n        }\\n        \\n        return false; // User has no required claims\\n    }\\n    \\n    // Invoice management for trade deals\\n    function _depositInvoiceToTradeDeal(uint256 tradeDealId, uint256 tokenId) internal returns (uint256, uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        \\n        // Use the Diamond's ERC721PermissionedTokenFacet to transfer the NFT\\n        // This bypasses the need for approval\\n        bytes memory emptyData = \\\"\\\";\\n        IERC721Permissioned(address(this)).forcedTransfer(\\n            msg.sender,\\n            address(this),\\n            tokenId,\\n            emptyData\\n        );\\n        \\n        // Track the invoice in this trade deal\\n        tds.tradeDealInvoices[tradeDealId].push(tokenId);\\n        \\n        // Return data for event emission in the facet\\n        return (tradeDealId, tokenId);\\n    }\\n    \\n    function _withdrawInvoiceFromTradeDeal(uint256 tradeDealId, uint256 tokenId) internal returns (uint256, uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // Verify that the NFT is owned by this contract\\n        require(IERC721(address(this)).ownerOf(tokenId) == address(this), \\\"NFT not owned by this contract\\\");\\n        \\n        // Remove the invoice from this trade deal's tracking\\n        uint256[] storage invoices = tds.tradeDealInvoices[tradeDealId];\\n        bool found = false;\\n        for (uint256 i = 0; i < invoices.length; i++) {\\n            if (invoices[i] == tokenId) {\\n                // Remove by swapping with the last element and popping\\n                invoices[i] = invoices[invoices.length - 1];\\n                invoices.pop();\\n                found = true;\\n                break;\\n            }\\n        }\\n        \\n        require(found, \\\"Invoice not found in this trade deal\\\");\\n        \\n        // Use forcedTransfer to transfer the NFT back to the sender\\n        // This bypasses the need for approval\\n        bytes memory emptyData = \\\"\\\";\\n        IERC721Permissioned(address(this)).forcedTransfer(\\n            address(this),\\n            msg.sender,\\n            tokenId,\\n            emptyData\\n        );\\n        \\n        // Return data for event emission in the facet\\n        return (tradeDealId, tokenId);\\n    }\\n    \\n    // USDC management for trade deals\\n    function _depositUSDCToTradeDeal(uint256 tradeDealId, uint256 amount) internal returns (uint256, uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        require(tradeDeal.usdcAddress != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Log the depositor address and amount\\n        address depositor = msg.sender;\\n        \\n        // Use the USDC token's transferFrom method to transfer tokens from the sender to this contract\\n        require(IERC20(tradeDeal.usdcAddress).transferFrom(depositor, address(this), amount), \\\"USDC transfer failed\\\");\\n        \\n        // Track the amount in this trade deal\\n        tds.tradeDealUsdcBalances[tradeDealId] += amount;\\n        \\n        // Explicitly add the depositor as a participant in the trade deal\\n        // This ensures they can receive VABB tokens\\n        if (!_isTradeDealParticipant(tradeDealId, depositor)) {\\n            _addTradeDealParticipant(tradeDealId, depositor);\\n        }\\n        \\n        // If the trade deal has a VABB token, mint VABB tokens to the depositor\\n        if (tradeDeal.vabbAddress != address(0)) {\\n            // Get the VABB token contract\\n            address vabbToken = tradeDeal.vabbAddress;\\n            \\n            // Force the trade deal to be active during minting\\n            bool wasActive = tradeDeal.active;\\n            tradeDeal.active = true;\\n            \\n            // Try to mint VABB tokens to the depositor\\n            // We need to make sure the depositor is added as a participant first\\n            // This is done by the _addTradeDealParticipant call above\\n            \\n            // Adjust for the difference in decimals between USDC (6) and VABB (18)\\n            // Multiply by 10^12 to convert from USDC decimals to VABB decimals\\n            uint256 adjustedAmount = amount * 1000000000000; // 10^12\\n            \\n            try IVABB(vabbToken).mint(depositor, adjustedAmount) {\\n                // Successfully minted VABB tokens\\n                // Log success for debugging\\n                console.log(\\\"Successfully minted VABB tokens to\\\", depositor);\\n                console.log(\\\"Amount:\\\", adjustedAmount);\\n            } catch {\\n                // Failed to mint VABB tokens, but we'll continue anyway\\n                // This could happen if the VABB token contract doesn't exist or if there's another issue\\n                // We'll continue anyway since the USDC deposit was successful\\n                console.log(\\\"Failed to mint VABB tokens\\\");\\n            }\\n            \\n            // Restore the original active state\\n            tradeDeal.active = wasActive;\\n        }\\n        \\n        // Return data for event emission in the facet\\n        return (tradeDealId, amount);\\n    }\\n    \\n    function _withdrawUSDCFromTradeDeal(uint256 tradeDealId, uint256 amount) internal returns (uint256, uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDealUsdcBalances[tradeDealId] >= amount, \\\"Insufficient USDC balance in trade deal\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        require(tradeDeal.usdcAddress != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Use the USDC token's transfer method to transfer tokens from this contract to the sender\\n        require(IERC20(tradeDeal.usdcAddress).transfer(msg.sender, amount), \\\"USDC transfer failed\\\");\\n        \\n        // Update the amount in this trade deal\\n        tds.tradeDealUsdcBalances[tradeDealId] -= amount;\\n        \\n        // Return data for event emission in the facet\\n        return (tradeDealId, amount);\\n    }\\n    \\n    // Interest distribution for a specific trade deal\\n    function _distributeInterestForTradeDeal(uint256 tradeDealId) internal returns (InterestDistributedParams memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        uint256 balance = tds.tradeDealUsdcBalances[tradeDealId];\\n        uint256 interest = (balance * tradeDeal.interestRate) / 10000;\\n        \\n        // Split interest between invoice holders and VABI tokens\\n        uint256 invoiceHoldersInterest = interest / 2;\\n        uint256 vabiInterest = interest - invoiceHoldersInterest;\\n        \\n        // Update USDC balances for this trade deal\\n        tds.tradeDealUsdcBalances[tradeDealId] -= interest;\\n        \\n        // Get the USDC token address\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // For now, we'll just keep the invoice holders' interest in the contract\\n        // In a real implementation, this would be distributed to the invoice holders\\n        \\n        // Mint VABI tokens based on this trade deal's ratio\\n        uint256 vabiTokensToMint = vabiInterest * tradeDeal.vabbToVabiRatio;\\n        address vabi = tradeDeal.vabiAddress;\\n        require(vabi != address(0), \\\"Trade deal VABI address not set\\\");\\n        \\n        // Call VABI contract to mint tokens\\n        IVABI(vabi).mint(address(this), vabiTokensToMint);\\n        \\n        // Return data for event emission in the facet\\n        return InterestDistributedParams({\\n            tradeDealId: tradeDealId,\\n            totalInterest: interest,\\n            invoicePoolInterest: invoiceHoldersInterest,\\n            vabiInterest: vabiInterest,\\n            vabiTokensMinted: vabiTokensToMint\\n        });\\n    }\\n    \\n    // Get USDC balance for a specific trade deal\\n    function _getUSDCBalanceForTradeDeal(uint256 tradeDealId) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealUsdcBalances[tradeDealId];\\n    }\\n    \\n    // Get invoice count for a specific trade deal\\n    function _getInvoiceCountForTradeDeal(uint256 tradeDealId) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealInvoices[tradeDealId].length;\\n    }\\n    \\n    // Get invoice token ID for a specific trade deal\\n    function _getInvoiceTokenIdForTradeDeal(uint256 tradeDealId, uint256 index) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(index < tds.tradeDealInvoices[tradeDealId].length, \\\"Index out of bounds\\\");\\n        \\n        return tds.tradeDealInvoices[tradeDealId][index];\\n    }\\n    \\n    // Redeem VABI tokens for a specific trade deal\\n    function _redeemVABITokensForTradeDeal(uint256 tradeDealId, uint256 amount) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        require(tds.tradeDeals[tradeDealId].active, \\\"Trade deal is not active\\\");\\n        \\n        TradeDeal storage tradeDeal = tds.tradeDeals[tradeDealId];\\n        \\n        // Calculate USDC amount based on the trade deal's ratio\\n        uint256 usdcAmount = amount / tradeDeal.vabbToVabiRatio;\\n        \\n        // Check if the trade deal has enough USDC balance\\n        require(tds.tradeDealUsdcBalances[tradeDealId] >= usdcAmount, \\\"Insufficient USDC balance in trade deal\\\");\\n        \\n        // Burn VABI tokens\\n        address vabi = tradeDeal.vabiAddress;\\n        require(vabi != address(0), \\\"Trade deal VABI address not set\\\");\\n        IVABI(vabi).burn(msg.sender, amount);\\n        \\n        // Update USDC balance for this trade deal\\n        tds.tradeDealUsdcBalances[tradeDealId] -= usdcAmount;\\n        \\n        // Get the USDC token address\\n        address usdcToken = tradeDeal.usdcAddress;\\n        require(usdcToken != address(0), \\\"Trade deal USDC address not set\\\");\\n        \\n        // Transfer USDC to the user\\n        require(IERC20(usdcToken).transfer(msg.sender, usdcAmount), \\\"USDC transfer failed\\\");\\n    }\\n    \\n    // Set required claim topics for a trade deal\\n    function _setTradeDealRequiredClaimTopics(uint256 tradeDealId, uint256[] memory claimTopics) internal returns (uint256, uint256[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        // Clear existing claim topics\\n        delete tds.tradeDealRequiredClaimTopics[tradeDealId];\\n        delete tds.tradeDeals[tradeDealId].requiredClaimTopics;\\n        \\n        // Set new claim topics\\n        for (uint256 i = 0; i < claimTopics.length; i++) {\\n            tds.tradeDealRequiredClaimTopics[tradeDealId].push(claimTopics[i]);\\n            tds.tradeDeals[tradeDealId].requiredClaimTopics.push(claimTopics[i]);\\n        }\\n        \\n        // Return data for event emission in the facet\\n        return (tradeDealId, claimTopics);\\n    }\\n    \\n    // Get required claim topics for a trade deal\\n    function _getTradeDealRequiredClaimTopics(uint256 tradeDealId) internal view returns (uint256[] memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        TradeDealStorage storage tds = ds.tradeDealStorage;\\n        \\n        require(_tradeDealExists(tradeDealId), \\\"Trade deal does not exist\\\");\\n        \\n        return tds.tradeDealRequiredClaimTopics[tradeDealId];\\n    }\\n    \\n    // Helper function to create or get a VABB token for a trade deal\\n    function _createOrGetVABBToken(uint256 tradeDealId, string memory symbol) internal returns (address) {\\n        address vabbAddress = address(0);\\n        \\n        // First try to get the VABB token address from the VABBTokenFactoryFacet\\n        (bool checkSuccess, bytes memory checkData) = address(this).staticcall(\\n            abi.encodeWithSignature(\\n                \\\"getVABBTokenAddress(uint256)\\\",\\n                tradeDealId\\n            )\\n        );\\n        \\n        // If the check was successful and returned a non-zero address, use that\\n        if (checkSuccess && checkData.length > 0) {\\n            address existingVabbAddress = abi.decode(checkData, (address));\\n            if (existingVabbAddress != address(0)) {\\n                return existingVabbAddress;\\n            }\\n        }\\n        \\n        // If we still don't have a VABB token address, try to create one\\n        string memory tokenName = string(abi.encodePacked(symbol, \\\"-C\\\"));\\n        string memory tokenSymbol = string(abi.encodePacked(symbol, \\\"-C\\\"));\\n        \\n        // Call the VABBTokenFactoryFacet to create a new VABB token\\n        (bool success, bytes memory data) = address(this).call(\\n            abi.encodeWithSignature(\\n                \\\"createVABBToken(uint256,string,string,bool)\\\",\\n                tradeDealId,\\n                tokenName,\\n                tokenSymbol,\\n                true // Enable restrictions by default\\n            )\\n        );\\n        \\n        // If the call was successful, use the returned token address\\n        if (success && data.length > 0) {\\n            vabbAddress = abi.decode(data, (address));\\n        }\\n        \\n        // If we still don't have a VABB token address, try to get it again\\n        if (vabbAddress == address(0)) {\\n            (bool retrySuccess, bytes memory retryData) = address(this).staticcall(\\n                abi.encodeWithSignature(\\n                    \\\"getVABBTokenAddress(uint256)\\\",\\n                    tradeDealId\\n                )\\n            );\\n            \\n            // If the retry was successful and returned a non-zero address, use that\\n            if (retrySuccess && retryData.length > 0) {\\n                address retryVabbAddress = abi.decode(retryData, (address));\\n                if (retryVabbAddress != address(0)) {\\n                    vabbAddress = retryVabbAddress;\\n                }\\n            }\\n        }\\n        \\n        return vabbAddress;\\n    }\\n}\",\"keccak256\":\"0x655b980d14e414f9681ccb33b0114f7324457980d1b9740874b85b4310dc02a5\",\"license\":\"MIT\"},\"contracts/libraries/VabbleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../interfaces/INFT.sol';\\nimport '../interfaces/IInvoicePool.sol';\\nimport '../interfaces/IVABB.sol';\\nimport '../interfaces/IUSDCPool.sol';\\nimport '../interfaces/IVABI.sol';\\nimport \\\"../identity/IdentityStorage.sol\\\";\\n\\n\\nlibrary VabbleLib {\\n    using IdentitySystemStorage for IdentitySystemStorage.IdentitySystem;\\n\\n    function setNFTContract(address _nftContract) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        ds.vabbleStorage.nft = _nftContract;\\n    }\\n\\n    function setInvoicePoolContract(address _invoicePoolContract) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        ds.vabbleStorage.invoicePool = _invoicePoolContract;\\n    }\\n\\n    function setVABBContract(address _vabbContract) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        ds.vabbleStorage.vabb = _vabbContract;\\n    }\\n\\n    function setUSDCPoolContract(address _usdcPoolContract) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        ds.vabbleStorage.usdcPool = _usdcPoolContract;\\n    }\\n\\n    function setVABIContract(address _vabiContract) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        ds.vabbleStorage.vabi = _vabiContract;\\n    }\\n\\n    function setInterestRate(uint256 _interestRate) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        ds.vabbleStorage.interestRate = _interestRate;\\n    }\\n\\n    function setVabbToVabiRatio(uint256 _vabbToVabiRatio) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        ds.vabbleStorage.vabbToVabiRatio = _vabbToVabiRatio;\\n    }\\n\\n    function mintInvoiceNFT(address _to, uint256 _tokenId, string memory _metadata) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        INFT(ds.vabbleStorage.nft).mint(_to, _tokenId, _metadata);\\n    }\\n\\n    function depositInvoice(uint256 _tokenId) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        IInvoicePool(ds.vabbleStorage.invoicePool).depositInvoice(_tokenId);\\n    }\\n\\n    function mintVABBTokens(address _to, uint256 _amount) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        IVABB(ds.vabbleStorage.vabb).mint(_to, _amount);\\n    }\\n\\n    function distributeInterest() internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        uint256 interest = IUSDCPool(ds.vabbleStorage.usdcPool).getBalance() * ds.vabbleStorage.interestRate / 10000;\\n        uint256 invoicePoolInterest = interest / 2;\\n        uint256 vabiInterest = interest - invoicePoolInterest;\\n\\n        IUSDCPool(ds.vabbleStorage.usdcPool).withdraw(interest);\\n        IUSDCPool(ds.vabbleStorage.usdcPool).deposit(invoicePoolInterest);\\n\\n        uint256 vabiTokensToMint = vabiInterest * ds.vabbleStorage.vabbToVabiRatio;\\n        IVABI(ds.vabbleStorage.vabi).mint(address(this), vabiTokensToMint);\\n    }\\n\\n    function burnInvoiceNFT(uint256 _tokenId) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        INFT(ds.vabbleStorage.nft).burn(_tokenId);\\n    }\\n\\n    function withdrawInvoice(uint256 _tokenId) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        IInvoicePool(ds.vabbleStorage.invoicePool).withdrawInvoice(_tokenId);\\n    }\\n\\n    function getInvoiceCount() internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        return IInvoicePool(ds.vabbleStorage.invoicePool).getInvoiceCount();\\n    }\\n\\n    function getInvoiceTokenId(uint256 _index) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        return IInvoicePool(ds.vabbleStorage.invoicePool).getInvoiceTokenId(_index);\\n    }\\n\\n    function getVABBBalance(address _account) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        return IVABB(ds.vabbleStorage.vabb).balanceOf(_account);\\n    }\\n\\n    function getVABIBalance(address _account) internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        return IVABI(ds.vabbleStorage.vabi).balanceOf(_account);\\n    }\\n\\n    function redeemVABITokens(uint256 _amount) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        IVABI(ds.vabbleStorage.vabi).burn(msg.sender, _amount);\\n        uint256 usdcAmount = _amount / ds.vabbleStorage.vabbToVabiRatio;\\n        IUSDCPool(ds.vabbleStorage.usdcPool).withdraw(usdcAmount);\\n        payable(msg.sender).transfer(usdcAmount);\\n    }\\n\\n    function getInterestRate() internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        return ds.vabbleStorage.interestRate;\\n    }\\n\\n    function getVabbToVabiRatio() internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        return ds.vabbleStorage.vabbToVabiRatio;\\n    }\\n\\n    function getInvoiceMetadata(uint256 _tokenId) internal view returns (string memory) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        return INFT(ds.vabbleStorage.nft).getMetadata(_tokenId);\\n    }\\n\\n    function getInvoiceOwner(uint256 _tokenId) internal view returns (address) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        return INFT(ds.vabbleStorage.nft).ownerOf(_tokenId);\\n    }\\n\\n    function isInvoiceNFTOwner(uint256 _tokenId, address _account) internal view returns (bool) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        return INFT(ds.vabbleStorage.nft).ownerOf(_tokenId) == _account;\\n    }\\n\\n    function depositUSDC(uint256 _amount) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        IUSDCPool(ds.vabbleStorage.usdcPool).deposit(_amount);\\n    }\\n\\n    function withdrawUSDC(uint256 _amount) internal {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        IUSDCPool(ds.vabbleStorage.usdcPool).withdraw(_amount);\\n    }\\n\\n    function getUSDCBalance() internal view returns (uint256) {\\n        IdentitySystemStorage.IdentitySystem storage ds = IdentitySystemStorage.diamondStorage();\\n        return IUSDCPool(ds.vabbleStorage.usdcPool).getBalance();\\n    }\\n}\",\"keccak256\":\"0x41a28bcda832c82480b123827951f561c0fd79ab1da0306c47e69688deeec357\",\"license\":\"MIT\"},\"contracts/utilities/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract Modifiers {\\n\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == msg.sender || address(this) == msg.sender,\\n            \\\"not authorized to call function\\\");\\n        _;\\n    }\\n\\n    function diamondOwner() public view returns (address) {\\n        return LibDiamond.contractOwner();\\n    }\\n\\n}\",\"keccak256\":\"0xe14791f6e81918aeed1b382c07fa11f8885c9f5e95c1eafaf3f1195925e9a2a5\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x6080806040523461001657612f7d908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c806313d6b5f6146122615780631504e3e1146121975780631718d7af146121665780634b0b57f614611f765780634c9f67dc14611a275780635a6e71c3146119c157806370ad7833146115205780637949ba001461140e5780637d1f54b8146112995780637d2549151461100e578063837e3d0214610e7d5780639ee0770814610de4578063b68f012514610d7e578063d2a6f69c146109cc578063e3f7cc9214610955578063e4efe1171461090f578063e6ad4611146108435763f7231dc8146100e357600080fd5b34610840576101006003193601126108405760043567ffffffffffffffff811161083c57610115903690600401612408565b60243567ffffffffffffffff811161083857610135903690600401612408565b60843567ffffffffffffffff81116108345761015590369060040161244f565b9061015e6122cf565b906101676122e5565b936101706122fb565b956001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132054163314801561082b575b6101ae90612539565b8396816101206040516101c081612374565b82815260606020820152606060408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015201527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833754946102248661263f565b7fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8337558583527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83356020526040832090868255845167ffffffffffffffff811161076f576102936001840154612664565b601f81116107f8575b50806020601f821160011461078e578691610783575b506000198260011b9260031b1c19161760018301555b855167ffffffffffffffff811161076f576102e66002840154612664565b601f8111610731575b506020601f82116001146106be5790806001600160a01b03939287916106b3575b506000198260011b9260031b1c19161760028401555b6044356003840155606435600484015560058301600160ff1982541617905516156106a1575b6001600160a01b0389167fffffffffffffffffffffffff0000000000000000000000000000000000000000600783015416176007820155600881016001600160a01b0389167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055600981016001600160a01b0383167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055865161061e575b507fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833654680100000000000000008110156106085760018101807fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8336558110156105f25785907fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83366000527f696bba000635c29ab48970a9bb3a30c259f244f79f191799986d75d3ccbf99f80155604051966104ac88612374565b8588528360208901528460408901526044356060890152606435608089015260a08801600190528260c08901526001600160a01b03891660e08901526001600160a01b0381166101008901526001600160a01b03821661012089015286511515986040519586956101208752610120870161052691612514565b868103602088015261053791612514565b9360443560408701526064356060870152608086016001905260a08601526001600160a01b031660c08501526001600160a01b031660e08401526001600160a01b0316610100830152037fed0366d8af5e5ed4eb6e11fb3853d3ba064a0723f1e824313b66b3bde66455ce91a26020926105b6575b5051604051908152f35b7fd870e4f0b23e1b6feaf7b25c39f808295f3c1bcd9e7208b3a2fc10b19db802e96105e9835192604051918291826124b6565b0390a2386105ac565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b939096919792885b8751811015610693578061064a61064061068e938b6126b5565b51600689016126e1565b878b527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833b60205261068960408c20610682838c6126b5565b51906126e1565b61263f565b610626565b5092979196909350386103f4565b97506106ad8486612cbe565b9761034c565b905088015138610310565b6002840186526020862090865b601f19841681106107195750916001916001600160a01b03949382601f19811610610700575b5050811b016002840155610326565b8a015160001960f88460031b161c1916905538806106f1565b9091602060018192858d0151815501930191016106cb565b61075f9060028501875260208720601f840160051c81019160208510610765575b601f0160051c019061269e565b386102ef565b9091508190610752565b602485634e487b7160e01b81526041600452fd5b9050860151386102b2565b91506001840186526020862086925b601f19831684106107e0576001935082601f198116106107c7575b5050811b0160018301556102c8565b88015160001960f88460031b161c1916905538806107b8565b8881015182556020938401936001909201910161079d565b6108259060018501875260208720601f840160051c8101916020851061076557601f0160051c019061269e565b3861029c565b503033146101a5565b8380fd5b8280fd5b5080fd5b80fd5b5034610840576020600319360112610840576004356001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015610906575b61089590612539565b6108a66108a18261270b565b6125f4565b8082527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83356020526005604083200160ff198154169055604051907f18a646ad5e9e25d43bd35451aefc591a1c2ec6fc53626bc814c3e5561da5f57b8383a2f35b5030331461088c565b503461084057806003193601126108405760206001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205416604051908152f35b5034610840576020600319360112610840576109aa610975600435612861565b60208101519060408101516060820151916109b860a0608083015192015115159260405196879660a0885260a0880190612514565b908682036020880152612514565b926040850152606084015260808301520390f35b5034610840576109db36612311565b906109e63382612978565b8015610d46575b6109f690612584565b610a026108a18261270b565b604051917f6352211e000000000000000000000000000000000000000000000000000000008352806004840152602060249381818681305afa908115610d3b578691610cfa575b506001600160a01b0330911603610cb7578285527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8338815260408520938594865b815480821015610cab578590610a9f83856126c9565b929054600393841b1c14610abd575050610ab89061263f565b610a89565b919093949596975060001991828101908111610c985790610af1610ae4610b0c93866126c9565b905490871b1c91856126c9565b90919082549060031b600019811b9283911b16911916179055565b81548015610c8557810192610b2184846126c9565b81939154921b1b191690555560015b15610c1d57604051908282019082821067ffffffffffffffff831117610c095750610b93918391604052868152604051809381927f4d5592ea00000000000000000000000000000000000000000000000000000000835287333060048601612b63565b038188305af18015610bfe57610bd0575b5050604051917fa92b2c8f01281ad4d8e4dff3f27cbe455644c050115ef8a0521ed35ab210b3bd8484a3f35b81610bef92903d10610bf7575b610be781836123c9565b810190612b4b565b503880610ba4565b503d610bdd565b6040513d87823e3d90fd5b634e487b7160e01b60005260416004526000fd5b608492506040519162461bcd60e51b83526004830152808201527f496e766f696365206e6f7420666f756e6420696e20746869732074726164652060448201527f6465616c000000000000000000000000000000000000000000000000000000006064820152fd5b8489634e487b7160e01b81526031600452fd5b858a634e487b7160e01b81526011600452fd5b50505090919293610b30565b606490601e856040519262461bcd60e51b845260048401528201527f4e4654206e6f74206f776e6564206279207468697320636f6e747261637400006044820152fd5b90508181813d8311610d34575b610d1181836123c9565b81010312610d3057516001600160a01b0381168103610d305738610a49565b8580fd5b503d610d07565b6040513d88823e3d90fd5b506109f66001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205416331490506109ed565b503461084057602060031936011261084057610dd46040610de092600435610da86108a18261270b565b81527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833b60205220612812565b604051918291826124b6565b0390f35b5034610840578060031936011261084057604051807fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83369182548082526020809201936000527f696bba000635c29ab48970a9bb3a30c259f244f79f191799986d75d3ccbf99f8916000905b828210610e6657610de085610dd4818903826123c9565b835486529485019460019384019390910190610e4f565b503461084057610e8c36612311565b610e963383612978565b8015610fd6575b610ea690612584565b610eb26108a18361270b565b81835260207fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83358152610eed60ff600560408720015416612b00565b6040519080820182811067ffffffffffffffff82111761060857610f49928291604052868152604051809481927f4d5592ea00000000000000000000000000000000000000000000000000000000835287303360048601612b63565b038188305af1918215610bfe577fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833892610fb9575b5083855252610f8f81604085206126e1565b604051917f0b66693e511e1dc453c70056959759d92966a30195684323c1a530209e3e32308484a3f35b610fcf90823d8411610bf757610be781836123c9565b5038610f7d565b50610ea66001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633149050610e9d565b50346108405760208060031936011261083c57600435906001600160a01b0390817fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015611290575b61106490612539565b83608060405161107381612358565b828152828482015282604082015282606082015201526110956108a18461270b565b8284527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83358082526110cf60ff600560408820015416612b00565b8385528152604084207fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83398083526127106111126040882054600385015490612c38565b04928360011c946111238686612b95565b92878952825260408820611138868254612b95565b905561114b816009860154161515612ba2565b600861115b600486015485612c38565b94015416801561124c578088913b1561083c576040517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018690529082908290604490829084905af1801561124157611221575b5050907f4ddc37c9b2de1d019f8484c159dcde5663dbe44fecc540fad47b4a608e8e70f294839260809594866040516111f281612358565b8a81528784820152846040820152856060820152015260405194855284015260408301526060820152a2604051f35b61122f909594939295612327565b61123d5790919286386111ba565b8680fd5b6040513d84823e3d90fd5b6064826040519062461bcd60e51b82526004820152601f60248201527f5472616465206465616c20564142492061646472657373206e6f7420736574006044820152fd5b5030331461105b565b50346108405760406003193601126108405760043560243567ffffffffffffffff8111610838576112ce90369060040161244f565b6001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015611405575b61130b90612539565b6113176108a18361270b565b8183527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833b91602083815261134d60408620612c4b565b8185527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833590818152600692611386846040892001612c4b565b865b85518110156113ca576113c5908289528784526113ac60408a20610682838a6126b5565b8289528484526106898660408b2001610682838a6126b5565b611388565b87827fd870e4f0b23e1b6feaf7b25c39f808295f3c1bcd9e7208b3a2fc10b19db802e96113fd89604051918291826124b6565b0390a2604051f35b50303314611302565b50346108405760a06003193601126108405760043561142b6122b9565b50604435906001600160a01b0380831680930361151b5760643581811680910361151b576084359282841680940361151b576009927fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015611512575b61149590612539565b6114a16108a18261270b565b85527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83356020526040852090600782017fffffffffffffffffffffffff000000000000000000000000000000000000000095868254161790556008820190858254161790550191825416179055604051f35b5030331461148c565b600080fd5b5034610840576101006003193601126108405760243567ffffffffffffffff811161083c57611553903690600401612408565b9060443567ffffffffffffffff811161083c57611574903690600401612408565b9161157d6122cf565b906115866122e5565b9161158f6122fb565b926001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205416331480156119b8575b6115cd90612539565b846101006040516115dd8161233b565b82815260606020820152606060408201528260608201528260808201528260a08201528260c08201528260e0820152015261161c6108a160043561270b565b60043585527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83356020526040852093835167ffffffffffffffff81116118fc576116686001870154612664565b601f8111611985575b50806020601f821160011461191b578891611910575b506000198260011b9260031b1c19161760018601555b86519667ffffffffffffffff88116118fc576116bc6002870154612664565b601f81116118c9575b506020601f891160011461183c57978088997f481f4c7283b81a95f22f60e167e146a8e25140deba7bc5c5816dfd5268a809cb989991611831575b506000198260011b9260031b1c19161760028801555b6064359687600382015561180560ff6005608435938460048201556001600160a01b03600782019916967fffffffffffffffffffffffff000000000000000000000000000000000000000099888b8254161790556001600160a01b0360088301991698898b8254161790556001600160a01b03600983019116809a8254161790550154169286610100604051956117ac8761233b565b60043587528a60208801528360408801528c60608801528560808801521515958660a08201528760c08201528860e082015201526117f7604051986101008a526101008a0190612514565b9088820360208a0152612514565b9760408701526060860152608085015260a084015260c083015260e082015280600435930390a2604051f35b905082015138611700565b6002870188526020882090885b601f198b1681106118b15750986001917f481f4c7283b81a95f22f60e167e146a8e25140deba7bc5c5816dfd5268a809cb98999a82601f19811610611898575b5050811b016002880155611716565b84015160001960f88460031b161c191690553880611889565b90916020600181928587015181550193019101611849565b6118f69060028801895260208920601f8b0160051c81019160208c1061076557601f0160051c019061269e565b386116c5565b602487634e487b7160e01b81526041600452fd5b905085015138611687565b91506001870188526020882088925b601f198316841061196d576001935082601f19811610611954575b5050811b01600186015561169d565b87015160001960f88460031b161c191690553880611945565b8781015182556020938401936001909201910161192a565b6119b29060018801895260208920601f840160051c8101916020851061076557601f0160051c019061269e565b38611671565b503033146115c4565b5034610840576040600319360112610840576119db6122b9565b506001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015611a1e575b611a1990612539565b604051f35b50303314611a10565b503461084057611a3636612311565b9190611a423382612978565b8015611f3e575b611a5290612584565b611a5e6108a18261270b565b8082527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8335602090808252611a9b60ff600560408720015416612b00565b828452815260408320936001600160a01b038060098701541690611ac0821515612ba2565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015284816064818a60249730898401528960448401525af1908115611f335790611b1b918891611f16575b50612bed565b8486527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8339845260408620805490848201809211611f035755611b5d3386612978565b15611eb4575b6007870154169586611ba1575b5050907fda3f953f7320b5f18504f92a7b98dd63b38f6bed8e98f1beb7739d4b0a104d7c91604051908152a2604051f35b6005019081549060ff1997600189841617845564e8d4a510008560001904811186151516611ea157850290803b15611e9d576040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390529089908290604490829084905af19081611e54575b50986000808860ff9586957fda3f953f7320b5f18504f92a7b98dd63b38f6bed8e98f1beb7739d4b0a104d7c9c9d9e158414611cfe57509050604051611c60816123ad565b601a81527f4661696c656420746f206d696e74205641424220746f6b656e730000000000008b820152611cd88b611cca604051938285938401967f41304fac0000000000000000000000000000000000000000000000000000000088528401526044830190612514565b03601f1981018352826123c9565b51906a636f6e736f6c652e6c6f675afa505b845416921615151617905584939238611b70565b611e4a6040917f5375636365737366756c6c79206d696e746564205641424220746f6b656e7320835195611d3187612391565b602287528601527f746f000000000000000000000000000000000000000000000000000000000000838601528d835191878084611d9d8582019a7f319af333000000000000000000000000000000000000000000000000000000008c52898b8401526064830190612514565b3360448301520394611db7601f19968781018352826123c9565b516a636f6e736f6c652e6c6f67998a5afa50611e388551611dd7816123ad565b600781527f416d6f756e743a000000000000000000000000000000000000000000000000008482015286519687948501987fb60e72cc000000000000000000000000000000000000000000000000000000008a528501526064840190612514565b906044830152039081018352826123c9565b51915afa50611cea565b60008860ff9586957fda3f953f7320b5f18504f92a7b98dd63b38f6bed8e98f1beb7739d4b0a104d7c9c9d959e95611e8c8596612327565b9d9c50955095505050999099611c1b565b8880fd5b8289634e487b7160e01b81526011600452fd5b611ec06108a18661270b565b8486527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833a845260408620338752845260408620600160ff19825416179055611b63565b8388634e487b7160e01b81526011600452fd5b611f2d9150863d8811610bf757610be781836123c9565b38611b15565b6040513d89823e3d90fd5b50611a526001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633149050611a49565b503461084057611f8536612311565b6001600160a01b03807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132054163314801561215d575b611fc390612539565b611fcf6108a18461270b565b8284527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833991602091838352816040872054106120f3578486527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8335835260096040872001541692612040841515612ba2565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101839052938390859060449082908a905af1938415610d3b577fa539a9eb6d64ed99d8198bd12034f5b51a1e0a78e730858ba9b30c253c6e966f946120ba9188916120dc5750612bed565b8486528252604085206120ce828254612b95565b9055604051908152a2604051f35b611f2d9150853d8711610bf757610be781836123c9565b6084836040519062461bcd60e51b82526004820152602760248201527f496e73756666696369656e7420555344432062616c616e636520696e2074726160448201527f6465206465616c000000000000000000000000000000000000000000000000006064820152fd5b50303314611fba565b503461084057604060031936011261084057602061218d6121856122b9565b600435612978565b6040519015158152f35b5034610840576020600319360112610840576004356001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015612258575b6121e990612539565b6121f56108a18261270b565b8082527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833560205260056040832001600160ff19825416179055604051907fbf2b21995a82cd2a31b4577ee5317f810aeeedf94f54f11104d5e8abc79f3f3b8383a2f35b503033146121e0565b5034610840576020600319360112610840576080612280600435612861565b6001600160a01b03908160e082015116916101208161010084015116920151169060405192308452602084015260408301526060820152f35b602435906001600160a01b038216820361151b57565b60a435906001600160a01b038216820361151b57565b60c435906001600160a01b038216820361151b57565b60e435906001600160a01b038216820361151b57565b600319604091011261151b576004359060243590565b67ffffffffffffffff811161060857604052565b610120810190811067ffffffffffffffff82111761060857604052565b60a0810190811067ffffffffffffffff82111761060857604052565b610140810190811067ffffffffffffffff82111761060857604052565b6060810190811067ffffffffffffffff82111761060857604052565b6040810190811067ffffffffffffffff82111761060857604052565b90601f601f19910116810190811067ffffffffffffffff82111761060857604052565b67ffffffffffffffff811161060857601f01601f191660200190565b81601f8201121561151b5780359061241f826123ec565b9261242d60405194856123c9565b8284526020838301011161151b57816000926020809301838601378301015290565b9080601f8301121561151b5781359067ffffffffffffffff8211610608578160051b60405193602093612484858401876123c9565b8552838086019282010192831161151b578301905b8282106124a7575050505090565b81358152908301908301612499565b6020908160408183019282815285518094520193019160005b8281106124dd575050505090565b8351855293810193928101926001016124cf565b60005b8381106125045750506000910152565b81810151838201526020016124f4565b90601f19601f602093612532815180928187528780880191016124f1565b0116010190565b1561254057565b606460405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e006044820152fd5b1561258b57565b608460405162461bcd60e51b8152602060048201526024808201527f4e6f742061207061727469636970616e7420696e20746869732074726164652060448201527f6465616c000000000000000000000000000000000000000000000000000000006064820152fd5b156125fb57565b606460405162461bcd60e51b815260206004820152601960248201527f5472616465206465616c20646f6573206e6f74206578697374000000000000006044820152fd5b600019811461264e5760010190565b634e487b7160e01b600052601160045260246000fd5b90600182811c92168015612694575b602083101461267e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612673565b8181106126a9575050565b6000815560010161269e565b80518210156105f25760209160051b010190565b80548210156105f25760005260206000200190600090565b90815491680100000000000000008310156106085782610af1916001612709950181556126c9565b565b7fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83375481109081612739575090565b8091506000527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83356020526040600020541490565b906040519182600082549261278184612664565b9081845260019485811690816000146127ee57506001146127ab575b5050612709925003836123c9565b9093915060005260209081600020936000915b8183106127d65750506127099350820101388061279d565b855488840185015294850194879450918301916127be565b905061270995506020935060ff1991501682840152151560051b820101388061279d565b9060405191828154918282526020928383019160005283600020936000905b82821061284757505050612709925003836123c9565b855484526001958601958895509381019390910190612831565b60405161286d81612374565b60406000808352606060208401526060828401528060608401528060808401528060a0840152606060c08401528060e084015261010093818585015281610120809501526128bd6108a18261270b565b81527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833560205220916009604051936128f485612374565b805485526129046001820161276d565b60208601526129156002820161276d565b6040860152600381015460608601526004810154608086015260ff600582015416151560a086015261294960068201612812565b60c08601526001600160a01b03928360078301541660e087015283600883015416908601520154169082015290565b6129846108a18261270b565b60008181526020927fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833a84526040808320916001600160a01b0380911692838552865260ff8285205416612af5578484527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833b928387528285205415612aeb5784527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8320865281842054168015612ae25783527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8324855280832080549495909290845b87865282825283862054811015612ad757612a80818588206126c9565b9054600391821b1c90875b898110612aa357505050612a9e9061263f565b612a63565b82612aae828a6126c9565b905490841b1c14612ac757612ac29061263f565b612a8b565b5050505050505050505050600190565b505050505091505090565b50505091505090565b5050505091505090565b505050505050600190565b15612b0757565b606460405162461bcd60e51b815260206004820152601860248201527f5472616465206465616c206973206e6f742061637469766500000000000000006044820152fd5b9081602091031261151b5751801515810361151b5790565b9092612b9294936080936001600160a01b03809216845216602083015260408201528160608201520190612514565b90565b9190820391821161264e57565b15612ba957565b606460405162461bcd60e51b815260206004820152601f60248201527f5472616465206465616c20555344432061646472657373206e6f7420736574006044820152fd5b15612bf457565b606460405162461bcd60e51b815260206004820152601460248201527f55534443207472616e73666572206661696c65640000000000000000000000006044820152fd5b806000190482118115151661264e570290565b80546000825580612c5a575050565b6127099160005260206000209081019061269e565b3d15612c9a573d90612c80826123ec565b91612c8e60405193846123c9565b82523d6000602084013e565b606090565b9081602091031261151b57516001600160a01b038116810361151b5790565b6000916040516020918480808585017f4e3432fe000000000000000000000000000000000000000000000000000000009586825288602482015260248152612d0581612391565b5190305afa612d12612c6f565b9080612f3d575b612f0b575b508091612e22612e3786612dab602260405195805184820190612d4481878b01846124f1565b880190612d81848a7f2d4300000000000000000000000000000000000000000000000000000000000094858a82015203600281018c52018a6123c9565b612d96604051968794519283918601906124f1565b8201908c8201520360028101845201826123c9565b604051928391612df28a8401967f9ead3d470000000000000000000000000000000000000000000000000000000088528c60248601526080604486015260a4850190612514565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016064850152612514565b6001608483015203601f1981018352826123c9565b519082305af1612e45612c6f565b9080612f01575b612edc575b506001600160a01b039283851615612e6b575b5050505090565b600091829160405190858201928352602482015260248152612e8c81612391565b5190305afa612e99612c6f565b9080612ed2575b612eab575b80612e64565b81612ebc9282518301019101612c9f565b1680612eca575b8080612ea5565b905038612ec3565b5080511515612ea0565b6001600160a01b03919450808380612ef993518301019101612c9f565b169238612e51565b5080511515612e4c565b6001600160a01b039150808580612f2793518301019101612c9f565b1680612f34578590612d1e565b94505050505090565b5080511515612d1956fea2646970667358221220682ccabd9bad33292123c9bd1d8591d75fac836bcd35e44ddba7f0e714409bae64736f6c63430008100033",
    "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c806313d6b5f6146122615780631504e3e1146121975780631718d7af146121665780634b0b57f614611f765780634c9f67dc14611a275780635a6e71c3146119c157806370ad7833146115205780637949ba001461140e5780637d1f54b8146112995780637d2549151461100e578063837e3d0214610e7d5780639ee0770814610de4578063b68f012514610d7e578063d2a6f69c146109cc578063e3f7cc9214610955578063e4efe1171461090f578063e6ad4611146108435763f7231dc8146100e357600080fd5b34610840576101006003193601126108405760043567ffffffffffffffff811161083c57610115903690600401612408565b60243567ffffffffffffffff811161083857610135903690600401612408565b60843567ffffffffffffffff81116108345761015590369060040161244f565b9061015e6122cf565b906101676122e5565b936101706122fb565b956001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132054163314801561082b575b6101ae90612539565b8396816101206040516101c081612374565b82815260606020820152606060408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015201527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833754946102248661263f565b7fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8337558583527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83356020526040832090868255845167ffffffffffffffff811161076f576102936001840154612664565b601f81116107f8575b50806020601f821160011461078e578691610783575b506000198260011b9260031b1c19161760018301555b855167ffffffffffffffff811161076f576102e66002840154612664565b601f8111610731575b506020601f82116001146106be5790806001600160a01b03939287916106b3575b506000198260011b9260031b1c19161760028401555b6044356003840155606435600484015560058301600160ff1982541617905516156106a1575b6001600160a01b0389167fffffffffffffffffffffffff0000000000000000000000000000000000000000600783015416176007820155600881016001600160a01b0389167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055600981016001600160a01b0383167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055865161061e575b507fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833654680100000000000000008110156106085760018101807fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8336558110156105f25785907fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83366000527f696bba000635c29ab48970a9bb3a30c259f244f79f191799986d75d3ccbf99f80155604051966104ac88612374565b8588528360208901528460408901526044356060890152606435608089015260a08801600190528260c08901526001600160a01b03891660e08901526001600160a01b0381166101008901526001600160a01b03821661012089015286511515986040519586956101208752610120870161052691612514565b868103602088015261053791612514565b9360443560408701526064356060870152608086016001905260a08601526001600160a01b031660c08501526001600160a01b031660e08401526001600160a01b0316610100830152037fed0366d8af5e5ed4eb6e11fb3853d3ba064a0723f1e824313b66b3bde66455ce91a26020926105b6575b5051604051908152f35b7fd870e4f0b23e1b6feaf7b25c39f808295f3c1bcd9e7208b3a2fc10b19db802e96105e9835192604051918291826124b6565b0390a2386105ac565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b939096919792885b8751811015610693578061064a61064061068e938b6126b5565b51600689016126e1565b878b527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833b60205261068960408c20610682838c6126b5565b51906126e1565b61263f565b610626565b5092979196909350386103f4565b97506106ad8486612cbe565b9761034c565b905088015138610310565b6002840186526020862090865b601f19841681106107195750916001916001600160a01b03949382601f19811610610700575b5050811b016002840155610326565b8a015160001960f88460031b161c1916905538806106f1565b9091602060018192858d0151815501930191016106cb565b61075f9060028501875260208720601f840160051c81019160208510610765575b601f0160051c019061269e565b386102ef565b9091508190610752565b602485634e487b7160e01b81526041600452fd5b9050860151386102b2565b91506001840186526020862086925b601f19831684106107e0576001935082601f198116106107c7575b5050811b0160018301556102c8565b88015160001960f88460031b161c1916905538806107b8565b8881015182556020938401936001909201910161079d565b6108259060018501875260208720601f840160051c8101916020851061076557601f0160051c019061269e565b3861029c565b503033146101a5565b8380fd5b8280fd5b5080fd5b80fd5b5034610840576020600319360112610840576004356001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015610906575b61089590612539565b6108a66108a18261270b565b6125f4565b8082527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83356020526005604083200160ff198154169055604051907f18a646ad5e9e25d43bd35451aefc591a1c2ec6fc53626bc814c3e5561da5f57b8383a2f35b5030331461088c565b503461084057806003193601126108405760206001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205416604051908152f35b5034610840576020600319360112610840576109aa610975600435612861565b60208101519060408101516060820151916109b860a0608083015192015115159260405196879660a0885260a0880190612514565b908682036020880152612514565b926040850152606084015260808301520390f35b5034610840576109db36612311565b906109e63382612978565b8015610d46575b6109f690612584565b610a026108a18261270b565b604051917f6352211e000000000000000000000000000000000000000000000000000000008352806004840152602060249381818681305afa908115610d3b578691610cfa575b506001600160a01b0330911603610cb7578285527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8338815260408520938594865b815480821015610cab578590610a9f83856126c9565b929054600393841b1c14610abd575050610ab89061263f565b610a89565b919093949596975060001991828101908111610c985790610af1610ae4610b0c93866126c9565b905490871b1c91856126c9565b90919082549060031b600019811b9283911b16911916179055565b81548015610c8557810192610b2184846126c9565b81939154921b1b191690555560015b15610c1d57604051908282019082821067ffffffffffffffff831117610c095750610b93918391604052868152604051809381927f4d5592ea00000000000000000000000000000000000000000000000000000000835287333060048601612b63565b038188305af18015610bfe57610bd0575b5050604051917fa92b2c8f01281ad4d8e4dff3f27cbe455644c050115ef8a0521ed35ab210b3bd8484a3f35b81610bef92903d10610bf7575b610be781836123c9565b810190612b4b565b503880610ba4565b503d610bdd565b6040513d87823e3d90fd5b634e487b7160e01b60005260416004526000fd5b608492506040519162461bcd60e51b83526004830152808201527f496e766f696365206e6f7420666f756e6420696e20746869732074726164652060448201527f6465616c000000000000000000000000000000000000000000000000000000006064820152fd5b8489634e487b7160e01b81526031600452fd5b858a634e487b7160e01b81526011600452fd5b50505090919293610b30565b606490601e856040519262461bcd60e51b845260048401528201527f4e4654206e6f74206f776e6564206279207468697320636f6e747261637400006044820152fd5b90508181813d8311610d34575b610d1181836123c9565b81010312610d3057516001600160a01b0381168103610d305738610a49565b8580fd5b503d610d07565b6040513d88823e3d90fd5b506109f66001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205416331490506109ed565b503461084057602060031936011261084057610dd46040610de092600435610da86108a18261270b565b81527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833b60205220612812565b604051918291826124b6565b0390f35b5034610840578060031936011261084057604051807fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83369182548082526020809201936000527f696bba000635c29ab48970a9bb3a30c259f244f79f191799986d75d3ccbf99f8916000905b828210610e6657610de085610dd4818903826123c9565b835486529485019460019384019390910190610e4f565b503461084057610e8c36612311565b610e963383612978565b8015610fd6575b610ea690612584565b610eb26108a18361270b565b81835260207fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83358152610eed60ff600560408720015416612b00565b6040519080820182811067ffffffffffffffff82111761060857610f49928291604052868152604051809481927f4d5592ea00000000000000000000000000000000000000000000000000000000835287303360048601612b63565b038188305af1918215610bfe577fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833892610fb9575b5083855252610f8f81604085206126e1565b604051917f0b66693e511e1dc453c70056959759d92966a30195684323c1a530209e3e32308484a3f35b610fcf90823d8411610bf757610be781836123c9565b5038610f7d565b50610ea66001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633149050610e9d565b50346108405760208060031936011261083c57600435906001600160a01b0390817fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015611290575b61106490612539565b83608060405161107381612358565b828152828482015282604082015282606082015201526110956108a18461270b565b8284527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83358082526110cf60ff600560408820015416612b00565b8385528152604084207fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83398083526127106111126040882054600385015490612c38565b04928360011c946111238686612b95565b92878952825260408820611138868254612b95565b905561114b816009860154161515612ba2565b600861115b600486015485612c38565b94015416801561124c578088913b1561083c576040517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018690529082908290604490829084905af1801561124157611221575b5050907f4ddc37c9b2de1d019f8484c159dcde5663dbe44fecc540fad47b4a608e8e70f294839260809594866040516111f281612358565b8a81528784820152846040820152856060820152015260405194855284015260408301526060820152a2604051f35b61122f909594939295612327565b61123d5790919286386111ba565b8680fd5b6040513d84823e3d90fd5b6064826040519062461bcd60e51b82526004820152601f60248201527f5472616465206465616c20564142492061646472657373206e6f7420736574006044820152fd5b5030331461105b565b50346108405760406003193601126108405760043560243567ffffffffffffffff8111610838576112ce90369060040161244f565b6001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015611405575b61130b90612539565b6113176108a18361270b565b8183527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833b91602083815261134d60408620612c4b565b8185527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833590818152600692611386846040892001612c4b565b865b85518110156113ca576113c5908289528784526113ac60408a20610682838a6126b5565b8289528484526106898660408b2001610682838a6126b5565b611388565b87827fd870e4f0b23e1b6feaf7b25c39f808295f3c1bcd9e7208b3a2fc10b19db802e96113fd89604051918291826124b6565b0390a2604051f35b50303314611302565b50346108405760a06003193601126108405760043561142b6122b9565b50604435906001600160a01b0380831680930361151b5760643581811680910361151b576084359282841680940361151b576009927fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015611512575b61149590612539565b6114a16108a18261270b565b85527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83356020526040852090600782017fffffffffffffffffffffffff000000000000000000000000000000000000000095868254161790556008820190858254161790550191825416179055604051f35b5030331461148c565b600080fd5b5034610840576101006003193601126108405760243567ffffffffffffffff811161083c57611553903690600401612408565b9060443567ffffffffffffffff811161083c57611574903690600401612408565b9161157d6122cf565b906115866122e5565b9161158f6122fb565b926001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205416331480156119b8575b6115cd90612539565b846101006040516115dd8161233b565b82815260606020820152606060408201528260608201528260808201528260a08201528260c08201528260e0820152015261161c6108a160043561270b565b60043585527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83356020526040852093835167ffffffffffffffff81116118fc576116686001870154612664565b601f8111611985575b50806020601f821160011461191b578891611910575b506000198260011b9260031b1c19161760018601555b86519667ffffffffffffffff88116118fc576116bc6002870154612664565b601f81116118c9575b506020601f891160011461183c57978088997f481f4c7283b81a95f22f60e167e146a8e25140deba7bc5c5816dfd5268a809cb989991611831575b506000198260011b9260031b1c19161760028801555b6064359687600382015561180560ff6005608435938460048201556001600160a01b03600782019916967fffffffffffffffffffffffff000000000000000000000000000000000000000099888b8254161790556001600160a01b0360088301991698898b8254161790556001600160a01b03600983019116809a8254161790550154169286610100604051956117ac8761233b565b60043587528a60208801528360408801528c60608801528560808801521515958660a08201528760c08201528860e082015201526117f7604051986101008a526101008a0190612514565b9088820360208a0152612514565b9760408701526060860152608085015260a084015260c083015260e082015280600435930390a2604051f35b905082015138611700565b6002870188526020882090885b601f198b1681106118b15750986001917f481f4c7283b81a95f22f60e167e146a8e25140deba7bc5c5816dfd5268a809cb98999a82601f19811610611898575b5050811b016002880155611716565b84015160001960f88460031b161c191690553880611889565b90916020600181928587015181550193019101611849565b6118f69060028801895260208920601f8b0160051c81019160208c1061076557601f0160051c019061269e565b386116c5565b602487634e487b7160e01b81526041600452fd5b905085015138611687565b91506001870188526020882088925b601f198316841061196d576001935082601f19811610611954575b5050811b01600186015561169d565b87015160001960f88460031b161c191690553880611945565b8781015182556020938401936001909201910161192a565b6119b29060018801895260208920601f840160051c8101916020851061076557601f0160051c019061269e565b38611671565b503033146115c4565b5034610840576040600319360112610840576119db6122b9565b506001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015611a1e575b611a1990612539565b604051f35b50303314611a10565b503461084057611a3636612311565b9190611a423382612978565b8015611f3e575b611a5290612584565b611a5e6108a18261270b565b8082527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8335602090808252611a9b60ff600560408720015416612b00565b828452815260408320936001600160a01b038060098701541690611ac0821515612ba2565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015284816064818a60249730898401528960448401525af1908115611f335790611b1b918891611f16575b50612bed565b8486527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8339845260408620805490848201809211611f035755611b5d3386612978565b15611eb4575b6007870154169586611ba1575b5050907fda3f953f7320b5f18504f92a7b98dd63b38f6bed8e98f1beb7739d4b0a104d7c91604051908152a2604051f35b6005019081549060ff1997600189841617845564e8d4a510008560001904811186151516611ea157850290803b15611e9d576040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390529089908290604490829084905af19081611e54575b50986000808860ff9586957fda3f953f7320b5f18504f92a7b98dd63b38f6bed8e98f1beb7739d4b0a104d7c9c9d9e158414611cfe57509050604051611c60816123ad565b601a81527f4661696c656420746f206d696e74205641424220746f6b656e730000000000008b820152611cd88b611cca604051938285938401967f41304fac0000000000000000000000000000000000000000000000000000000088528401526044830190612514565b03601f1981018352826123c9565b51906a636f6e736f6c652e6c6f675afa505b845416921615151617905584939238611b70565b611e4a6040917f5375636365737366756c6c79206d696e746564205641424220746f6b656e7320835195611d3187612391565b602287528601527f746f000000000000000000000000000000000000000000000000000000000000838601528d835191878084611d9d8582019a7f319af333000000000000000000000000000000000000000000000000000000008c52898b8401526064830190612514565b3360448301520394611db7601f19968781018352826123c9565b516a636f6e736f6c652e6c6f67998a5afa50611e388551611dd7816123ad565b600781527f416d6f756e743a000000000000000000000000000000000000000000000000008482015286519687948501987fb60e72cc000000000000000000000000000000000000000000000000000000008a528501526064840190612514565b906044830152039081018352826123c9565b51915afa50611cea565b60008860ff9586957fda3f953f7320b5f18504f92a7b98dd63b38f6bed8e98f1beb7739d4b0a104d7c9c9d959e95611e8c8596612327565b9d9c50955095505050999099611c1b565b8880fd5b8289634e487b7160e01b81526011600452fd5b611ec06108a18661270b565b8486527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833a845260408620338752845260408620600160ff19825416179055611b63565b8388634e487b7160e01b81526011600452fd5b611f2d9150863d8811610bf757610be781836123c9565b38611b15565b6040513d89823e3d90fd5b50611a526001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633149050611a49565b503461084057611f8536612311565b6001600160a01b03807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132054163314801561215d575b611fc390612539565b611fcf6108a18461270b565b8284527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833991602091838352816040872054106120f3578486527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8335835260096040872001541692612040841515612ba2565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101839052938390859060449082908a905af1938415610d3b577fa539a9eb6d64ed99d8198bd12034f5b51a1e0a78e730858ba9b30c253c6e966f946120ba9188916120dc5750612bed565b8486528252604085206120ce828254612b95565b9055604051908152a2604051f35b611f2d9150853d8711610bf757610be781836123c9565b6084836040519062461bcd60e51b82526004820152602760248201527f496e73756666696369656e7420555344432062616c616e636520696e2074726160448201527f6465206465616c000000000000000000000000000000000000000000000000006064820152fd5b50303314611fba565b503461084057604060031936011261084057602061218d6121856122b9565b600435612978565b6040519015158152f35b5034610840576020600319360112610840576004356001600160a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633148015612258575b6121e990612539565b6121f56108a18261270b565b8082527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833560205260056040832001600160ff19825416179055604051907fbf2b21995a82cd2a31b4577ee5317f810aeeedf94f54f11104d5e8abc79f3f3b8383a2f35b503033146121e0565b5034610840576020600319360112610840576080612280600435612861565b6001600160a01b03908160e082015116916101208161010084015116920151169060405192308452602084015260408301526060820152f35b602435906001600160a01b038216820361151b57565b60a435906001600160a01b038216820361151b57565b60c435906001600160a01b038216820361151b57565b60e435906001600160a01b038216820361151b57565b600319604091011261151b576004359060243590565b67ffffffffffffffff811161060857604052565b610120810190811067ffffffffffffffff82111761060857604052565b60a0810190811067ffffffffffffffff82111761060857604052565b610140810190811067ffffffffffffffff82111761060857604052565b6060810190811067ffffffffffffffff82111761060857604052565b6040810190811067ffffffffffffffff82111761060857604052565b90601f601f19910116810190811067ffffffffffffffff82111761060857604052565b67ffffffffffffffff811161060857601f01601f191660200190565b81601f8201121561151b5780359061241f826123ec565b9261242d60405194856123c9565b8284526020838301011161151b57816000926020809301838601378301015290565b9080601f8301121561151b5781359067ffffffffffffffff8211610608578160051b60405193602093612484858401876123c9565b8552838086019282010192831161151b578301905b8282106124a7575050505090565b81358152908301908301612499565b6020908160408183019282815285518094520193019160005b8281106124dd575050505090565b8351855293810193928101926001016124cf565b60005b8381106125045750506000910152565b81810151838201526020016124f4565b90601f19601f602093612532815180928187528780880191016124f1565b0116010190565b1561254057565b606460405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e006044820152fd5b1561258b57565b608460405162461bcd60e51b8152602060048201526024808201527f4e6f742061207061727469636970616e7420696e20746869732074726164652060448201527f6465616c000000000000000000000000000000000000000000000000000000006064820152fd5b156125fb57565b606460405162461bcd60e51b815260206004820152601960248201527f5472616465206465616c20646f6573206e6f74206578697374000000000000006044820152fd5b600019811461264e5760010190565b634e487b7160e01b600052601160045260246000fd5b90600182811c92168015612694575b602083101461267e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612673565b8181106126a9575050565b6000815560010161269e565b80518210156105f25760209160051b010190565b80548210156105f25760005260206000200190600090565b90815491680100000000000000008310156106085782610af1916001612709950181556126c9565b565b7fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83375481109081612739575090565b8091506000527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd83356020526040600020541490565b906040519182600082549261278184612664565b9081845260019485811690816000146127ee57506001146127ab575b5050612709925003836123c9565b9093915060005260209081600020936000915b8183106127d65750506127099350820101388061279d565b855488840185015294850194879450918301916127be565b905061270995506020935060ff1991501682840152151560051b820101388061279d565b9060405191828154918282526020928383019160005283600020936000905b82821061284757505050612709925003836123c9565b855484526001958601958895509381019390910190612831565b60405161286d81612374565b60406000808352606060208401526060828401528060608401528060808401528060a0840152606060c08401528060e084015261010093818585015281610120809501526128bd6108a18261270b565b81527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833560205220916009604051936128f485612374565b805485526129046001820161276d565b60208601526129156002820161276d565b6040860152600381015460608601526004810154608086015260ff600582015416151560a086015261294960068201612812565b60c08601526001600160a01b03928360078301541660e087015283600883015416908601520154169082015290565b6129846108a18261270b565b60008181526020927fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833a84526040808320916001600160a01b0380911692838552865260ff8285205416612af5578484527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd833b928387528285205415612aeb5784527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8320865281842054168015612ae25783527fbd516eb36b5d4489adb2e717e7d0ce56c1b814eda85e78ad9d8f240b24dd8324855280832080549495909290845b87865282825283862054811015612ad757612a80818588206126c9565b9054600391821b1c90875b898110612aa357505050612a9e9061263f565b612a63565b82612aae828a6126c9565b905490841b1c14612ac757612ac29061263f565b612a8b565b5050505050505050505050600190565b505050505091505090565b50505091505090565b5050505091505090565b505050505050600190565b15612b0757565b606460405162461bcd60e51b815260206004820152601860248201527f5472616465206465616c206973206e6f742061637469766500000000000000006044820152fd5b9081602091031261151b5751801515810361151b5790565b9092612b9294936080936001600160a01b03809216845216602083015260408201528160608201520190612514565b90565b9190820391821161264e57565b15612ba957565b606460405162461bcd60e51b815260206004820152601f60248201527f5472616465206465616c20555344432061646472657373206e6f7420736574006044820152fd5b15612bf457565b606460405162461bcd60e51b815260206004820152601460248201527f55534443207472616e73666572206661696c65640000000000000000000000006044820152fd5b806000190482118115151661264e570290565b80546000825580612c5a575050565b6127099160005260206000209081019061269e565b3d15612c9a573d90612c80826123ec565b91612c8e60405193846123c9565b82523d6000602084013e565b606090565b9081602091031261151b57516001600160a01b038116810361151b5790565b6000916040516020918480808585017f4e3432fe000000000000000000000000000000000000000000000000000000009586825288602482015260248152612d0581612391565b5190305afa612d12612c6f565b9080612f3d575b612f0b575b508091612e22612e3786612dab602260405195805184820190612d4481878b01846124f1565b880190612d81848a7f2d4300000000000000000000000000000000000000000000000000000000000094858a82015203600281018c52018a6123c9565b612d96604051968794519283918601906124f1565b8201908c8201520360028101845201826123c9565b604051928391612df28a8401967f9ead3d470000000000000000000000000000000000000000000000000000000088528c60248601526080604486015260a4850190612514565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016064850152612514565b6001608483015203601f1981018352826123c9565b519082305af1612e45612c6f565b9080612f01575b612edc575b506001600160a01b039283851615612e6b575b5050505090565b600091829160405190858201928352602482015260248152612e8c81612391565b5190305afa612e99612c6f565b9080612ed2575b612eab575b80612e64565b81612ebc9282518301019101612c9f565b1680612eca575b8080612ea5565b905038612ec3565b5080511515612ea0565b6001600160a01b03919450808380612ef993518301019101612c9f565b169238612e51565b5080511515612e4c565b6001600160a01b039150808580612f2793518301019101612c9f565b1680612f34578590612d1e565b94505050505090565b5080511515612d1956fea2646970667358221220682ccabd9bad33292123c9bd1d8591d75fac836bcd35e44ddba7f0e714409bae64736f6c63430008100033",
    "libraries": {
      "AddressSet": "0x1699b43c0C3cc1d24C1C146Aad9b20e48aB68059",
      "AttributeLib": "0x1b427Ea47deE55dB1ba5B575C7C127C3CFc18144",
      "Base64": "0x0da328A90A202FE4671E6AD89065AAB20C26280F",
      "Bytes32Set": "0xe1191c7A6053279800db1214e5B1B07181948664",
      "CarbonCreditLib": "0x479feCd08400dD54a4950cC9a27895d010Adb5eE",
      "DiamondFactoryLib": "0x8ffa82D09eeB6F246C5Ba97a0Fd641fc9Ee88641",
      "DiamondLib": "0x6e83c797ed9ac196A39a5275A8971e29A5717cbD",
      "ERC721AEnumerationLib": "0x449d6999d0bb005D1f8EBF54aA3d7f7af1F13cC7",
      "ERC721ALib": "0x3Ef355A1bEBFd56B80DAC00E31D74469628bFcC3",
      "Identity": "0x5E1669E71DdcbE347Ec4EA66804014f880a10D4d",
      "IdentityFactory": "0x32de103e902579795705eeA3B3739c6b1Db9c63c",
      "IdentitySystemStorage": "0x3F1ceC63417803757ED90CBAf75Dd75B2579250F",
      "LibDiamond": "0x82667FEa235EaF3fb4F1397448004ea6AF9b9D71",
      "MerkleProver": "0x89715654639B17764f6Fb7Dd5109D25EF5e44F25",
      "MetadataLib": "0x316b94e1c9077e0999E095f3840f2Ef18d4aA7D9",
      "MultiSaleLib": "0x5cABcf66582A7FBaa1598D812482d3e5d18E0905",
      "Strings": "0xE41CbbEc0f1266084eC8D9D53c132ba1a85b1B55",
      "StringsLib": "0xc630a19B087eb9CE95b7a4Ef579d1F72B706013e",
      "SVGTemplatesLib": "0xddf2FADaB4DaA2aD68C4Cb70EB73a53B644aAf43",
      "UInt256Set": "0x8126388aa1c18Eb10CCd1B1c633c86f476CF97A1",
      "VariablePriceLib": "0x801d9817B58596EE6916e910E83c66806EE3ED12"
    },
    "devdoc": {
      "kind": "dev",
      "methods": {},
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    },
    "storageLayout": {
      "storage": [],
      "types": null
    }
  }